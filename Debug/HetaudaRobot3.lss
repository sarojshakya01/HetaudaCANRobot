
HetaudaRobot3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000216c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  0000216c  00002200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000039d  00800146  00800146  000022e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002306  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000039d  00000000  00000000  00004782  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001650  00000000  00000000  00004b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00006170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e0  00000000  00000000  000064b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001915  00000000  00000000  00006998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000082ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3e       	cpi	r26, 0xE3	; 227
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 03 	call	0x7ca	; 0x7ca <main>
      8a:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_CMND>:
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
	else if(y==2)
	LCD_CMND(0xBF+x);
      92:	98 b3       	in	r25, 0x18	; 24
      94:	28 2f       	mov	r18, r24
      96:	20 7f       	andi	r18, 0xF0	; 240
      98:	9f 70       	andi	r25, 0x0F	; 15
      9a:	92 2b       	or	r25, r18
      9c:	98 bb       	out	0x18, r25	; 24
      9e:	c2 98       	cbi	0x18, 2	; 24
      a0:	c3 9a       	sbi	0x18, 3	; 24
      a2:	ef e8       	ldi	r30, 0x8F	; 143
      a4:	f1 e0       	ldi	r31, 0x01	; 1
      a6:	31 97       	sbiw	r30, 0x01	; 1
      a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_CMND+0x14>
      aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_CMND+0x1a>
      ac:	00 00       	nop
      ae:	c3 98       	cbi	0x18, 3	; 24
      b0:	ef ea       	ldi	r30, 0xAF	; 175
      b2:	f4 e0       	ldi	r31, 0x04	; 4
      b4:	31 97       	sbiw	r30, 0x01	; 1
      b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_CMND+0x22>
      b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_CMND+0x28>
      ba:	00 00       	nop
      bc:	28 b3       	in	r18, 0x18	; 24
      be:	f0 e1       	ldi	r31, 0x10	; 16
      c0:	8f 9f       	mul	r24, r31
      c2:	c0 01       	movw	r24, r0
      c4:	11 24       	eor	r1, r1
      c6:	92 2f       	mov	r25, r18
      c8:	9f 70       	andi	r25, 0x0F	; 15
      ca:	89 2b       	or	r24, r25
      cc:	88 bb       	out	0x18, r24	; 24
      ce:	c3 9a       	sbi	0x18, 3	; 24
      d0:	8f ea       	ldi	r24, 0xAF	; 175
      d2:	94 e0       	ldi	r25, 0x04	; 4
      d4:	01 97       	sbiw	r24, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_CMND+0x42>
      d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_CMND+0x48>
      da:	00 00       	nop
      dc:	c3 98       	cbi	0x18, 3	; 24
      de:	08 95       	ret

000000e0 <LCD_DATA>:
      e0:	98 b3       	in	r25, 0x18	; 24
      e2:	28 2f       	mov	r18, r24
      e4:	20 7f       	andi	r18, 0xF0	; 240
      e6:	9f 70       	andi	r25, 0x0F	; 15
      e8:	92 2b       	or	r25, r18
      ea:	98 bb       	out	0x18, r25	; 24
      ec:	c2 9a       	sbi	0x18, 2	; 24
      ee:	c3 9a       	sbi	0x18, 3	; 24
      f0:	ef e1       	ldi	r30, 0x1F	; 31
      f2:	f3 e0       	ldi	r31, 0x03	; 3
      f4:	31 97       	sbiw	r30, 0x01	; 1
      f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_DATA+0x14>
      f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_DATA+0x1a>
      fa:	00 00       	nop
      fc:	c3 98       	cbi	0x18, 3	; 24
      fe:	ef e1       	ldi	r30, 0x1F	; 31
     100:	f3 e0       	ldi	r31, 0x03	; 3
     102:	31 97       	sbiw	r30, 0x01	; 1
     104:	f1 f7       	brne	.-4      	; 0x102 <LCD_DATA+0x22>
     106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_DATA+0x28>
     108:	00 00       	nop
     10a:	28 b3       	in	r18, 0x18	; 24
     10c:	f0 e1       	ldi	r31, 0x10	; 16
     10e:	8f 9f       	mul	r24, r31
     110:	c0 01       	movw	r24, r0
     112:	11 24       	eor	r1, r1
     114:	92 2f       	mov	r25, r18
     116:	9f 70       	andi	r25, 0x0F	; 15
     118:	89 2b       	or	r24, r25
     11a:	88 bb       	out	0x18, r24	; 24
     11c:	c3 9a       	sbi	0x18, 3	; 24
     11e:	8f e1       	ldi	r24, 0x1F	; 31
     120:	93 e0       	ldi	r25, 0x03	; 3
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <LCD_DATA+0x42>
     126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_DATA+0x48>
     128:	00 00       	nop
     12a:	c3 98       	cbi	0x18, 3	; 24
     12c:	08 95       	ret

0000012e <LCD_INITIALIZE>:
     12e:	8c ef       	ldi	r24, 0xFC	; 252
     130:	87 bb       	out	0x17, r24	; 23
     132:	c3 98       	cbi	0x18, 3	; 24
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	83 ec       	ldi	r24, 0xC3	; 195
     138:	99 e0       	ldi	r25, 0x09	; 9
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	80 40       	sbci	r24, 0x00	; 0
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	e1 f7       	brne	.-8      	; 0x13a <LCD_INITIALIZE+0xc>
     142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_INITIALIZE+0x16>
     144:	00 00       	nop
     146:	83 e3       	ldi	r24, 0x33	; 51
     148:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     14c:	2f ef       	ldi	r18, 0xFF	; 255
     14e:	89 ef       	ldi	r24, 0xF9	; 249
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	21 50       	subi	r18, 0x01	; 1
     154:	80 40       	sbci	r24, 0x00	; 0
     156:	90 40       	sbci	r25, 0x00	; 0
     158:	e1 f7       	brne	.-8      	; 0x152 <LCD_INITIALIZE+0x24>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_INITIALIZE+0x2e>
     15c:	00 00       	nop
     15e:	82 e3       	ldi	r24, 0x32	; 50
     160:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     164:	2f ef       	ldi	r18, 0xFF	; 255
     166:	89 ef       	ldi	r24, 0xF9	; 249
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	21 50       	subi	r18, 0x01	; 1
     16c:	80 40       	sbci	r24, 0x00	; 0
     16e:	90 40       	sbci	r25, 0x00	; 0
     170:	e1 f7       	brne	.-8      	; 0x16a <LCD_INITIALIZE+0x3c>
     172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_INITIALIZE+0x46>
     174:	00 00       	nop
     176:	88 e2       	ldi	r24, 0x28	; 40
     178:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     17c:	2f ef       	ldi	r18, 0xFF	; 255
     17e:	89 ef       	ldi	r24, 0xF9	; 249
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	21 50       	subi	r18, 0x01	; 1
     184:	80 40       	sbci	r24, 0x00	; 0
     186:	90 40       	sbci	r25, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <LCD_INITIALIZE+0x54>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_INITIALIZE+0x5e>
     18c:	00 00       	nop
     18e:	8c e0       	ldi	r24, 0x0C	; 12
     190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     194:	2f ef       	ldi	r18, 0xFF	; 255
     196:	89 ef       	ldi	r24, 0xF9	; 249
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	21 50       	subi	r18, 0x01	; 1
     19c:	80 40       	sbci	r24, 0x00	; 0
     19e:	90 40       	sbci	r25, 0x00	; 0
     1a0:	e1 f7       	brne	.-8      	; 0x19a <LCD_INITIALIZE+0x6c>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_INITIALIZE+0x76>
     1a4:	00 00       	nop
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     1ac:	2f ef       	ldi	r18, 0xFF	; 255
     1ae:	89 ef       	ldi	r24, 0xF9	; 249
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	21 50       	subi	r18, 0x01	; 1
     1b4:	80 40       	sbci	r24, 0x00	; 0
     1b6:	90 40       	sbci	r25, 0x00	; 0
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_INITIALIZE+0x84>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_INITIALIZE+0x8e>
     1bc:	00 00       	nop
     1be:	08 95       	ret

000001c0 <LCD_CLEAR>:
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     1c6:	8f e3       	ldi	r24, 0x3F	; 63
     1c8:	9f e1       	ldi	r25, 0x1F	; 31
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_CLEAR+0xa>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_CLEAR+0x10>
     1d0:	00 00       	nop
     1d2:	08 95       	ret

000001d4 <LCD_PRINT>:
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	fc 01       	movw	r30, r24
     1dc:	80 81       	ld	r24, Z
     1de:	88 23       	and	r24, r24
     1e0:	79 f0       	breq	.+30     	; 0x200 <LCD_PRINT+0x2c>
     1e2:	8f 01       	movw	r16, r30
     1e4:	c0 e0       	ldi	r28, 0x00	; 0
     1e6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
     1ea:	cf 5f       	subi	r28, 0xFF	; 255
     1ec:	85 e3       	ldi	r24, 0x35	; 53
     1ee:	8a 95       	dec	r24
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_PRINT+0x1a>
     1f2:	00 00       	nop
     1f4:	f8 01       	movw	r30, r16
     1f6:	ec 0f       	add	r30, r28
     1f8:	f1 1d       	adc	r31, r1
     1fa:	80 81       	ld	r24, Z
     1fc:	81 11       	cpse	r24, r1
     1fe:	f3 cf       	rjmp	.-26     	; 0x1e6 <LCD_PRINT+0x12>
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	08 95       	ret

00000208 <LCD_NUM>:
}
void LCD_NUM(unsigned char num)
{
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
	LCD_DATA(num/10000 + 0x30);
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	60 e1       	ldi	r22, 0x10	; 16
     210:	77 e2       	ldi	r23, 0x27	; 39
     212:	0e 94 8c 10 	call	0x2118	; 0x2118 <__divmodhi4>
     216:	ec 01       	movw	r28, r24
     218:	80 e3       	ldi	r24, 0x30	; 48
     21a:	86 0f       	add	r24, r22
     21c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	num = num%10000;
	LCD_DATA(num/1000 + 0x30);
     220:	ce 01       	movw	r24, r28
     222:	99 27       	eor	r25, r25
     224:	68 ee       	ldi	r22, 0xE8	; 232
     226:	73 e0       	ldi	r23, 0x03	; 3
     228:	0e 94 8c 10 	call	0x2118	; 0x2118 <__divmodhi4>
     22c:	d8 2f       	mov	r29, r24
     22e:	80 e3       	ldi	r24, 0x30	; 48
     230:	86 0f       	add	r24, r22
     232:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	num = num%1000;
	LCD_DATA(num/100 + 0x30);
     236:	c9 e2       	ldi	r28, 0x29	; 41
     238:	dc 9f       	mul	r29, r28
     23a:	c1 2d       	mov	r28, r1
     23c:	11 24       	eor	r1, r1
     23e:	c2 95       	swap	r28
     240:	cf 70       	andi	r28, 0x0F	; 15
     242:	80 e3       	ldi	r24, 0x30	; 48
     244:	8c 0f       	add	r24, r28
     246:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	num = num%100;
     24a:	84 e6       	ldi	r24, 0x64	; 100
     24c:	c8 9f       	mul	r28, r24
     24e:	d0 19       	sub	r29, r0
     250:	11 24       	eor	r1, r1
	LCD_DATA(num/10 + 0x30);
     252:	cd ec       	ldi	r28, 0xCD	; 205
     254:	dc 9f       	mul	r29, r28
     256:	c1 2d       	mov	r28, r1
     258:	11 24       	eor	r1, r1
     25a:	c6 95       	lsr	r28
     25c:	c6 95       	lsr	r28
     25e:	c6 95       	lsr	r28
     260:	80 e3       	ldi	r24, 0x30	; 48
     262:	8c 0f       	add	r24, r28
     264:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(num%10 + 0x30);
     268:	cc 0f       	add	r28, r28
     26a:	8c 2f       	mov	r24, r28
     26c:	88 0f       	add	r24, r24
     26e:	88 0f       	add	r24, r24
     270:	c8 0f       	add	r28, r24
     272:	8d 2f       	mov	r24, r29
     274:	8c 1b       	sub	r24, r28
     276:	80 5d       	subi	r24, 0xD0	; 208
     278:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <PORT_INITIALIZE>:

void PORT_INITIALIZE()
{
	SENSOR_DDR = 0b00010000;
     282:	80 e1       	ldi	r24, 0x10	; 16
     284:	8a bb       	out	0x1a, r24	; 26
	SENSOR_PORT = 0b11101111;
     286:	8f ee       	ldi	r24, 0xEF	; 239
     288:	8b bb       	out	0x1b, r24	; 27
	MOTOR_DDR = 0xFF;
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	81 bb       	out	0x11, r24	; 17
	MOTOR_PORT = 0x00;
     28e:	12 ba       	out	0x12, r1	; 18
     290:	08 95       	ret

00000292 <SET_INITIAL_INFO>:
}

void SET_INITIAL_INFO()
{
     292:	28 e8       	ldi	r18, 0x88	; 136
     294:	33 e0       	ldi	r19, 0x03	; 3
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	11 c0       	rjmp	.+34     	; 0x2be <SET_INITIAL_INFO+0x2c>
     29c:	df 01       	movw	r26, r30
     29e:	11 97       	sbiw	r26, 0x01	; 1
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
     2a0:	9c 93       	st	X, r25
			details1[i][j].Y=j;
     2a2:	80 83       	st	Z, r24
     2a4:	12 97       	sbiw	r26, 0x02	; 2
			details1[i][j].status = UNVISITED;
     2a6:	1c 92       	st	X, r1
     2a8:	11 96       	adiw	r26, 0x01	; 1
			details1[i][j].priority = 0;
     2aa:	1c 92       	st	X, r1
     2ac:	8f 5f       	subi	r24, 0xFF	; 255
     2ae:	3a 96       	adiw	r30, 0x0a	; 10
void SET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
     2b0:	87 30       	cpi	r24, 0x07	; 7
     2b2:	a1 f7       	brne	.-24     	; 0x29c <SET_INITIAL_INFO+0xa>
     2b4:	2a 5b       	subi	r18, 0xBA	; 186
     2b6:	3f 4f       	sbci	r19, 0xFF	; 255
     2b8:	9f 5f       	subi	r25, 0xFF	; 255
}

void SET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
     2ba:	95 30       	cpi	r25, 0x05	; 5
     2bc:	19 f0       	breq	.+6      	; 0x2c4 <SET_INITIAL_INFO+0x32>
	MOTOR_DDR = 0xFF;
	MOTOR_PORT = 0x00;
}

void SET_INITIAL_INFO()
{
     2be:	f9 01       	movw	r30, r18
     2c0:	84 2f       	mov	r24, r20
     2c2:	ec cf       	rjmp	.-40     	; 0x29c <SET_INITIAL_INFO+0xa>
     2c4:	08 95       	ret

000002c6 <DEFINE_DESTINATION>:
}

void DEFINE_DESTINATION()
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
     2c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2ca:	88 23       	and	r24, r24
     2cc:	91 f0       	breq	.+36     	; 0x2f2 <DEFINE_DESTINATION+0x2c>
     2ce:	90 e0       	ldi	r25, 0x00	; 0
	{
		destination[i].X = 2;
     2d0:	e1 ed       	ldi	r30, 0xD1	; 209
     2d2:	f2 e0       	ldi	r31, 0x02	; 2
     2d4:	22 e0       	ldi	r18, 0x02	; 2
     2d6:	22 83       	std	Z+2, r18	; 0x02
		destination[i].Y = i+2;
     2d8:	23 83       	std	Z+3, r18	; 0x03
}

void DEFINE_DESTINATION()
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
     2da:	82 30       	cpi	r24, 0x02	; 2
     2dc:	91 05       	cpc	r25, r1
     2de:	48 f0       	brcs	.+18     	; 0x2f2 <DEFINE_DESTINATION+0x2c>
	{
		destination[i].X = 2;
     2e0:	24 87       	std	Z+12, r18	; 0x0c
		destination[i].Y = i+2;
     2e2:	23 e0       	ldi	r18, 0x03	; 3
     2e4:	25 87       	std	Z+13, r18	; 0x0d
}

void DEFINE_DESTINATION()
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
     2e6:	03 97       	sbiw	r24, 0x03	; 3
     2e8:	20 f0       	brcs	.+8      	; 0x2f2 <DEFINE_DESTINATION+0x2c>
	{
		destination[i].X = 2;
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	86 8b       	std	Z+22, r24	; 0x16
		destination[i].Y = i+2;
     2ee:	84 e0       	ldi	r24, 0x04	; 4
     2f0:	87 8b       	std	Z+23, r24	; 0x17
     2f2:	08 95       	ret

000002f4 <SOUND_BUZZER>:
	}
}

void SOUND_BUZZER()
{
	US_BUZZER_DDR = 0b00001100;
     2f4:	8c e0       	ldi	r24, 0x0C	; 12
     2f6:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0b00000100;
     2f8:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	2f ef       	ldi	r18, 0xFF	; 255
     2fc:	87 e8       	ldi	r24, 0x87	; 135
     2fe:	93 e1       	ldi	r25, 0x13	; 19
     300:	21 50       	subi	r18, 0x01	; 1
     302:	80 40       	sbci	r24, 0x00	; 0
     304:	90 40       	sbci	r25, 0x00	; 0
     306:	e1 f7       	brne	.-8      	; 0x300 <SOUND_BUZZER+0xc>
     308:	00 c0       	rjmp	.+0      	; 0x30a <SOUND_BUZZER+0x16>
     30a:	00 00       	nop
	_delay_ms(400);
	PORTC &= 0b11111011;
     30c:	aa 98       	cbi	0x15, 2	; 21
     30e:	08 95       	ret

00000310 <PWM_SET>:
}

void PWM_SET()
{
	TCCR1A = 0xA1;
     310:	81 ea       	ldi	r24, 0xA1	; 161
     312:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x01;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	8e bd       	out	0x2e, r24	; 46
     318:	08 95       	ret

0000031a <BOT_STOP>:
	return d;
}
*/
void BOT_STOP()
{
	PWM_SET();
     31a:	0e 94 88 01 	call	0x310	; 0x310 <PWM_SET>
	OCR1A = 0;
     31e:	1b bc       	out	0x2b, r1	; 43
     320:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
     322:	19 bc       	out	0x29, r1	; 41
     324:	18 bc       	out	0x28, r1	; 40
	MOTOR_PORT = 0x00;
     326:	12 ba       	out	0x12, r1	; 18
     328:	08 95       	ret

0000032a <BOT_MOVE>:
}
//unsigned char speed = 200;
void BOT_MOVE(unsigned char direction)
{
     32a:	cf 93       	push	r28
     32c:	c8 2f       	mov	r28, r24
	BOT_STOP();
     32e:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	PWM_SET();
     332:	0e 94 88 01 	call	0x310	; 0x310 <PWM_SET>
	switch(direction)
     336:	c2 30       	cpi	r28, 0x02	; 2
     338:	d1 f0       	breq	.+52     	; 0x36e <BOT_MOVE+0x44>
     33a:	28 f4       	brcc	.+10     	; 0x346 <BOT_MOVE+0x1c>
     33c:	cc 23       	and	r28, r28
     33e:	49 f0       	breq	.+18     	; 0x352 <BOT_MOVE+0x28>
     340:	c1 30       	cpi	r28, 0x01	; 1
     342:	71 f0       	breq	.+28     	; 0x360 <BOT_MOVE+0x36>
     344:	31 c0       	rjmp	.+98     	; 0x3a8 <BOT_MOVE+0x7e>
     346:	c4 30       	cpi	r28, 0x04	; 4
     348:	01 f1       	breq	.+64     	; 0x38a <BOT_MOVE+0x60>
     34a:	c0 f0       	brcs	.+48     	; 0x37c <BOT_MOVE+0x52>
     34c:	c5 30       	cpi	r28, 0x05	; 5
     34e:	29 f1       	breq	.+74     	; 0x39a <BOT_MOVE+0x70>
     350:	2b c0       	rjmp	.+86     	; 0x3a8 <BOT_MOVE+0x7e>
	{
		case LEFT:
			OCR1A = 0;
     352:	1b bc       	out	0x2b, r1	; 43
     354:	1a bc       	out	0x2a, r1	; 42
			OCR1B = 150;
     356:	86 e9       	ldi	r24, 0x96	; 150
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	99 bd       	out	0x29, r25	; 41
     35c:	88 bd       	out	0x28, r24	; 40
			//MOTOR_PORT |= 0b00010000; //PIN4=OCR1B
			break;
     35e:	24 c0       	rjmp	.+72     	; 0x3a8 <BOT_MOVE+0x7e>
		case RIGHT:
			OCR1A = 150;
     360:	86 e9       	ldi	r24, 0x96	; 150
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	9b bd       	out	0x2b, r25	; 43
     366:	8a bd       	out	0x2a, r24	; 42
			OCR1B = 0;
     368:	19 bc       	out	0x29, r1	; 41
     36a:	18 bc       	out	0x28, r1	; 40
			//MOTOR_PORT |= 0b00100000; //PIN5=OCR1A
			break;
     36c:	1d c0       	rjmp	.+58     	; 0x3a8 <BOT_MOVE+0x7e>
		case FORWARD:
			OCR1A = 170;
     36e:	8a ea       	ldi	r24, 0xAA	; 170
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9b bd       	out	0x2b, r25	; 43
     374:	8a bd       	out	0x2a, r24	; 42
			OCR1B = 170;
     376:	99 bd       	out	0x29, r25	; 41
     378:	88 bd       	out	0x28, r24	; 40
			//MOTOR_PORT |= 0b00110000;
			break;
     37a:	16 c0       	rjmp	.+44     	; 0x3a8 <BOT_MOVE+0x7e>
		case BACKWARD:
			OCR1A = 0;
     37c:	1b bc       	out	0x2b, r1	; 43
     37e:	1a bc       	out	0x2a, r1	; 42
			OCR1B = 0;
     380:	19 bc       	out	0x29, r1	; 41
     382:	18 bc       	out	0x28, r1	; 40
			MOTOR_PORT = 0b11000000;
     384:	80 ec       	ldi	r24, 0xC0	; 192
     386:	82 bb       	out	0x12, r24	; 18
			break;
     388:	0f c0       	rjmp	.+30     	; 0x3a8 <BOT_MOVE+0x7e>
		case LEFT_BACK:
			OCR1A = 0;
     38a:	1b bc       	out	0x2b, r1	; 43
     38c:	1a bc       	out	0x2a, r1	; 42
			OCR1B = 255;
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	99 bd       	out	0x29, r25	; 41
     394:	88 bd       	out	0x28, r24	; 40
			MOTOR_PORT |= 0b10000000; //PIN4=OCR1B
     396:	97 9a       	sbi	0x12, 7	; 18
			break;
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <BOT_MOVE+0x7e>
		case RIGHT_BACK:
			OCR1A = 255;
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	9b bd       	out	0x2b, r25	; 43
     3a0:	8a bd       	out	0x2a, r24	; 42
			OCR1B = 0;
     3a2:	19 bc       	out	0x29, r1	; 41
     3a4:	18 bc       	out	0x28, r1	; 40
			MOTOR_PORT |= 0b01000000; //PIN5=OCR1A
     3a6:	96 9a       	sbi	0x12, 6	; 18
			break;	
	}	
}
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <BLOCK_LIFT>:

void BLOCK_LIFT(unsigned char direction)
{
     3ac:	cf 93       	push	r28
     3ae:	c8 2f       	mov	r28, r24
	BOT_STOP();
     3b0:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	if(direction == FORWARD)
     3b4:	c2 30       	cpi	r28, 0x02	; 2
     3b6:	11 f4       	brne	.+4      	; 0x3bc <BLOCK_LIFT+0x10>
		MOTOR_PORT |= 0b00000001;
     3b8:	90 9a       	sbi	0x12, 0	; 18
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <BLOCK_LIFT+0x16>
	else if (direction == BACKWARD)
     3bc:	c3 30       	cpi	r28, 0x03	; 3
     3be:	09 f4       	brne	.+2      	; 0x3c2 <BLOCK_LIFT+0x16>
		MOTOR_PORT |= 0b00000010;
     3c0:	91 9a       	sbi	0x12, 1	; 18
}
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <BLOCK_HOLD>:

void BLOCK_HOLD(unsigned char direction)
{
     3c6:	cf 93       	push	r28
     3c8:	c8 2f       	mov	r28, r24
	BOT_STOP();
     3ca:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	if(direction == FORWARD)
     3ce:	c2 30       	cpi	r28, 0x02	; 2
     3d0:	11 f4       	brne	.+4      	; 0x3d6 <BLOCK_HOLD+0x10>
		MOTOR_PORT |= 0b00000100;
     3d2:	92 9a       	sbi	0x12, 2	; 18
     3d4:	03 c0       	rjmp	.+6      	; 0x3dc <BLOCK_HOLD+0x16>
	else if (direction == BACKWARD)
     3d6:	c3 30       	cpi	r28, 0x03	; 3
     3d8:	09 f4       	brne	.+2      	; 0x3dc <BLOCK_HOLD+0x16>
		MOTOR_PORT |= 0b00001000;
     3da:	93 9a       	sbi	0x12, 3	; 18
}
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <STOP_N_UPDATE_LOC>:
	}
}

void STOP_N_UPDATE_LOC()
{
	BOT_STOP();
     3e0:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	if (dir == 'N')	Y++;
     3e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     3e8:	8e 34       	cpi	r24, 0x4E	; 78
     3ea:	31 f4       	brne	.+12     	; 0x3f8 <STOP_N_UPDATE_LOC+0x18>
     3ec:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Y>
     3f6:	17 c0       	rjmp	.+46     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
	else if (dir == 'E')	X--;
     3f8:	85 34       	cpi	r24, 0x45	; 69
     3fa:	31 f4       	brne	.+12     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
     3fc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
     400:	81 50       	subi	r24, 0x01	; 1
     402:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <X>
     406:	0f c0       	rjmp	.+30     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
	else if (dir == 'W')	X++;
     408:	87 35       	cpi	r24, 0x57	; 87
     40a:	31 f4       	brne	.+12     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     40c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <X>
     416:	07 c0       	rjmp	.+14     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
	else if (dir == 'S')	Y--	;
     418:	83 35       	cpi	r24, 0x53	; 83
     41a:	29 f4       	brne	.+10     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     41c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
     420:	81 50       	subi	r24, 0x01	; 1
     422:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Y>
	count++;
     426:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <count>
     42a:	8f 5f       	subi	r24, 0xFF	; 255
     42c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <count>
	SOUND_BUZZER();
     430:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SOUND_BUZZER>
     434:	08 95       	ret

00000436 <FOLLOW_LINE_BACKWARD>:
	}
}

void FOLLOW_LINE_BACKWARD()
{
	if (((SENSOR_PIN & GRID_SENSOR_MASK) == 0b11100000 && prev_count==FALSE))
     436:	89 b3       	in	r24, 0x19	; 25
     438:	80 7e       	andi	r24, 0xE0	; 224
     43a:	80 3e       	cpi	r24, 0xE0	; 224
     43c:	69 f4       	brne	.+26     	; 0x458 <FOLLOW_LINE_BACKWARD+0x22>
     43e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <prev_count>
     442:	81 11       	cpse	r24, r1
     444:	09 c0       	rjmp	.+18     	; 0x458 <FOLLOW_LINE_BACKWARD+0x22>
	{
		prev_count= TRUE;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <prev_count>
		count++;
     44c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <count>
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <count>
     456:	08 95       	ret
	}
	else if (((SENSOR_PIN & GRID_SENSOR_MASK) == 0b11100000 && prev_count==TRUE))
     458:	89 b3       	in	r24, 0x19	; 25
     45a:	80 7e       	andi	r24, 0xE0	; 224
     45c:	80 3e       	cpi	r24, 0xE0	; 224
     45e:	41 f4       	brne	.+16     	; 0x470 <FOLLOW_LINE_BACKWARD+0x3a>
     460:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <prev_count>
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	21 f4       	brne	.+8      	; 0x470 <FOLLOW_LINE_BACKWARD+0x3a>
	{
		BOT_MOVE(BACKWARD);
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     46e:	08 95       	ret
	}
	else
	{
		BOT_MOVE(BACKWARD);
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     476:	08 95       	ret

00000478 <TURN_90>:
	}
}

void TURN_90(unsigned char direction)
{
     478:	cf 93       	push	r28
     47a:	c8 2f       	mov	r28, r24
	BOT_STOP();
     47c:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	81 ee       	ldi	r24, 0xE1	; 225
     484:	94 e0       	ldi	r25, 0x04	; 4
     486:	21 50       	subi	r18, 0x01	; 1
     488:	80 40       	sbci	r24, 0x00	; 0
     48a:	90 40       	sbci	r25, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <TURN_90+0xe>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <TURN_90+0x18>
     490:	00 00       	nop
	_delay_ms(100);
	if(direction == LEFT)
     492:	c1 11       	cpse	r28, r1
     494:	42 c0       	rjmp	.+132    	; 0x51a <TURN_90+0xa2>
	{
		BOT_MOVE(FORWARD);
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     49c:	2f ef       	ldi	r18, 0xFF	; 255
     49e:	80 e4       	ldi	r24, 0x40	; 64
     4a0:	9a e0       	ldi	r25, 0x0A	; 10
     4a2:	21 50       	subi	r18, 0x01	; 1
     4a4:	80 40       	sbci	r24, 0x00	; 0
     4a6:	90 40       	sbci	r25, 0x00	; 0
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <TURN_90+0x2a>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <TURN_90+0x34>
     4ac:	00 00       	nop
		_delay_ms(210);
		BOT_STOP();
     4ae:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
     4b2:	2f ef       	ldi	r18, 0xFF	; 255
     4b4:	81 ee       	ldi	r24, 0xE1	; 225
     4b6:	94 e0       	ldi	r25, 0x04	; 4
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	80 40       	sbci	r24, 0x00	; 0
     4bc:	90 40       	sbci	r25, 0x00	; 0
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <TURN_90+0x40>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <TURN_90+0x4a>
     4c2:	00 00       	nop
		_delay_ms(100);
		BOT_MOVE(LEFT_BACK);
     4c4:	84 e0       	ldi	r24, 0x04	; 4
     4c6:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     4ca:	2f ef       	ldi	r18, 0xFF	; 255
     4cc:	80 e1       	ldi	r24, 0x10	; 16
     4ce:	92 e1       	ldi	r25, 0x12	; 18
     4d0:	21 50       	subi	r18, 0x01	; 1
     4d2:	80 40       	sbci	r24, 0x00	; 0
     4d4:	90 40       	sbci	r25, 0x00	; 0
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <TURN_90+0x58>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <TURN_90+0x62>
     4da:	00 00       	nop
		_delay_ms(TURN_90_DELAY);
		//if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b111000000) BOT_MOVE(LEFT_BACK);
		//_delay_ms(75);
		BOT_STOP();
     4dc:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
		switch(dir)
     4e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     4e4:	8e 34       	cpi	r24, 0x4E	; 78
     4e6:	49 f0       	breq	.+18     	; 0x4fa <TURN_90+0x82>
     4e8:	18 f4       	brcc	.+6      	; 0x4f0 <TURN_90+0x78>
     4ea:	85 34       	cpi	r24, 0x45	; 69
     4ec:	51 f0       	breq	.+20     	; 0x502 <TURN_90+0x8a>
     4ee:	59 c0       	rjmp	.+178    	; 0x5a2 <TURN_90+0x12a>
     4f0:	83 35       	cpi	r24, 0x53	; 83
     4f2:	79 f0       	breq	.+30     	; 0x512 <TURN_90+0x9a>
     4f4:	87 35       	cpi	r24, 0x57	; 87
     4f6:	49 f0       	breq	.+18     	; 0x50a <TURN_90+0x92>
     4f8:	54 c0       	rjmp	.+168    	; 0x5a2 <TURN_90+0x12a>
		{
			case 'N':
				dir = 'W';
     4fa:	87 e5       	ldi	r24, 0x57	; 87
     4fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
				break;
     500:	50 c0       	rjmp	.+160    	; 0x5a2 <TURN_90+0x12a>
			case 'E':
				dir = 'N';
     502:	8e e4       	ldi	r24, 0x4E	; 78
     504:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
				break;
     508:	4c c0       	rjmp	.+152    	; 0x5a2 <TURN_90+0x12a>
			case  'W':
				dir ='S';
     50a:	83 e5       	ldi	r24, 0x53	; 83
     50c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
				break;
     510:	48 c0       	rjmp	.+144    	; 0x5a2 <TURN_90+0x12a>
			case 'S':
				dir = 'E';
     512:	85 e4       	ldi	r24, 0x45	; 69
     514:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
				break;
     518:	44 c0       	rjmp	.+136    	; 0x5a2 <TURN_90+0x12a>
		}
	}
	
	else if(direction == RIGHT)
     51a:	c1 30       	cpi	r28, 0x01	; 1
     51c:	09 f0       	breq	.+2      	; 0x520 <TURN_90+0xa8>
     51e:	41 c0       	rjmp	.+130    	; 0x5a2 <TURN_90+0x12a>
	{
		BOT_MOVE(FORWARD);
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     526:	2f ef       	ldi	r18, 0xFF	; 255
     528:	80 e4       	ldi	r24, 0x40	; 64
     52a:	9a e0       	ldi	r25, 0x0A	; 10
     52c:	21 50       	subi	r18, 0x01	; 1
     52e:	80 40       	sbci	r24, 0x00	; 0
     530:	90 40       	sbci	r25, 0x00	; 0
     532:	e1 f7       	brne	.-8      	; 0x52c <TURN_90+0xb4>
     534:	00 c0       	rjmp	.+0      	; 0x536 <TURN_90+0xbe>
     536:	00 00       	nop
		_delay_ms(210);
		BOT_STOP();
     538:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
     53c:	2f ef       	ldi	r18, 0xFF	; 255
     53e:	81 ee       	ldi	r24, 0xE1	; 225
     540:	94 e0       	ldi	r25, 0x04	; 4
     542:	21 50       	subi	r18, 0x01	; 1
     544:	80 40       	sbci	r24, 0x00	; 0
     546:	90 40       	sbci	r25, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <TURN_90+0xca>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <TURN_90+0xd4>
     54c:	00 00       	nop
		_delay_ms(100);
		BOT_MOVE(RIGHT_BACK);
     54e:	85 e0       	ldi	r24, 0x05	; 5
     550:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     554:	2f ef       	ldi	r18, 0xFF	; 255
     556:	80 e1       	ldi	r24, 0x10	; 16
     558:	92 e1       	ldi	r25, 0x12	; 18
     55a:	21 50       	subi	r18, 0x01	; 1
     55c:	80 40       	sbci	r24, 0x00	; 0
     55e:	90 40       	sbci	r25, 0x00	; 0
     560:	e1 f7       	brne	.-8      	; 0x55a <TURN_90+0xe2>
     562:	00 c0       	rjmp	.+0      	; 0x564 <TURN_90+0xec>
     564:	00 00       	nop
		_delay_ms(TURN_90_DELAY);
		//if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b11100000) BOT_MOVE(RIGHT_BACK);
		//_delay_ms(75);
		BOT_STOP();		
     566:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
		switch(dir)
     56a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     56e:	8e 34       	cpi	r24, 0x4E	; 78
     570:	49 f0       	breq	.+18     	; 0x584 <TURN_90+0x10c>
     572:	18 f4       	brcc	.+6      	; 0x57a <TURN_90+0x102>
     574:	85 34       	cpi	r24, 0x45	; 69
     576:	51 f0       	breq	.+20     	; 0x58c <TURN_90+0x114>
     578:	14 c0       	rjmp	.+40     	; 0x5a2 <TURN_90+0x12a>
     57a:	83 35       	cpi	r24, 0x53	; 83
     57c:	79 f0       	breq	.+30     	; 0x59c <TURN_90+0x124>
     57e:	87 35       	cpi	r24, 0x57	; 87
     580:	49 f0       	breq	.+18     	; 0x594 <TURN_90+0x11c>
     582:	0f c0       	rjmp	.+30     	; 0x5a2 <TURN_90+0x12a>
		{
			case 'N':
				dir = 'E';
     584:	85 e4       	ldi	r24, 0x45	; 69
     586:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
				break;
     58a:	0b c0       	rjmp	.+22     	; 0x5a2 <TURN_90+0x12a>
			case 'E':
				dir = 'S';
     58c:	83 e5       	ldi	r24, 0x53	; 83
     58e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
				break;
     592:	07 c0       	rjmp	.+14     	; 0x5a2 <TURN_90+0x12a>
			case  'W':
				dir ='N';
     594:	8e e4       	ldi	r24, 0x4E	; 78
     596:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
				break;
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <TURN_90+0x12a>
			case 'S':
				dir = 'W';
     59c:	87 e5       	ldi	r24, 0x57	; 87
     59e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
				break;
		}
	}
}
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <TURN_180>:

void TURN_180()
{
	BOT_STOP();
     5a6:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	81 ee       	ldi	r24, 0xE1	; 225
     5ae:	94 e0       	ldi	r25, 0x04	; 4
     5b0:	21 50       	subi	r18, 0x01	; 1
     5b2:	80 40       	sbci	r24, 0x00	; 0
     5b4:	90 40       	sbci	r25, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <TURN_180+0xa>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <TURN_180+0x14>
     5ba:	00 00       	nop
	_delay_ms(100);
	BOT_MOVE(FORWARD);
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     5c2:	2f ef       	ldi	r18, 0xFF	; 255
     5c4:	80 e4       	ldi	r24, 0x40	; 64
     5c6:	9a e0       	ldi	r25, 0x0A	; 10
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	80 40       	sbci	r24, 0x00	; 0
     5cc:	90 40       	sbci	r25, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <TURN_180+0x22>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <TURN_180+0x2c>
     5d2:	00 00       	nop
	_delay_ms(210);
	BOT_STOP();
     5d4:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
     5d8:	2f ef       	ldi	r18, 0xFF	; 255
     5da:	81 ee       	ldi	r24, 0xE1	; 225
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	21 50       	subi	r18, 0x01	; 1
     5e0:	80 40       	sbci	r24, 0x00	; 0
     5e2:	90 40       	sbci	r25, 0x00	; 0
     5e4:	e1 f7       	brne	.-8      	; 0x5de <TURN_180+0x38>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <TURN_180+0x42>
     5e8:	00 00       	nop
	_delay_ms(100);
	BOT_MOVE(LEFT_BACK);
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     5f0:	2f ef       	ldi	r18, 0xFF	; 255
     5f2:	83 e3       	ldi	r24, 0x33	; 51
     5f4:	91 e2       	ldi	r25, 0x21	; 33
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	80 40       	sbci	r24, 0x00	; 0
     5fa:	90 40       	sbci	r25, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <TURN_180+0x50>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <TURN_180+0x5a>
     600:	00 00       	nop
	_delay_ms(TURN_180_DELAY);
	BOT_STOP();
     602:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	if((SENSOR_PIN & GRID_SENSOR_MASK) != 0b11100000) BOT_MOVE(LEFT_BACK);
     606:	89 b3       	in	r24, 0x19	; 25
     608:	80 7e       	andi	r24, 0xE0	; 224
     60a:	80 3e       	cpi	r24, 0xE0	; 224
     60c:	19 f0       	breq	.+6      	; 0x614 <TURN_180+0x6e>
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     614:	2f ef       	ldi	r18, 0xFF	; 255
     616:	81 ee       	ldi	r24, 0xE1	; 225
     618:	94 e0       	ldi	r25, 0x04	; 4
     61a:	21 50       	subi	r18, 0x01	; 1
     61c:	80 40       	sbci	r24, 0x00	; 0
     61e:	90 40       	sbci	r25, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <TURN_180+0x74>
     622:	00 c0       	rjmp	.+0      	; 0x624 <TURN_180+0x7e>
     624:	00 00       	nop
	_delay_ms(100);
	BOT_STOP();
     626:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	switch(dir)
     62a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     62e:	8e 34       	cpi	r24, 0x4E	; 78
     630:	49 f0       	breq	.+18     	; 0x644 <TURN_180+0x9e>
     632:	18 f4       	brcc	.+6      	; 0x63a <TURN_180+0x94>
     634:	85 34       	cpi	r24, 0x45	; 69
     636:	51 f0       	breq	.+20     	; 0x64c <TURN_180+0xa6>
     638:	14 c0       	rjmp	.+40     	; 0x662 <TURN_180+0xbc>
     63a:	83 35       	cpi	r24, 0x53	; 83
     63c:	79 f0       	breq	.+30     	; 0x65c <TURN_180+0xb6>
     63e:	87 35       	cpi	r24, 0x57	; 87
     640:	49 f0       	breq	.+18     	; 0x654 <TURN_180+0xae>
     642:	0f c0       	rjmp	.+30     	; 0x662 <TURN_180+0xbc>
	{
		case 'N':
			dir = 'S';
     644:	83 e5       	ldi	r24, 0x53	; 83
     646:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
			break;
     64a:	0b c0       	rjmp	.+22     	; 0x662 <TURN_180+0xbc>
		case 'E':
			dir = 'W';
     64c:	87 e5       	ldi	r24, 0x57	; 87
     64e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
			break;
     652:	07 c0       	rjmp	.+14     	; 0x662 <TURN_180+0xbc>
		case  'W':
			dir ='E';
     654:	85 e4       	ldi	r24, 0x45	; 69
     656:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
			break;
     65a:	03 c0       	rjmp	.+6      	; 0x662 <TURN_180+0xbc>
		case 'S':
			dir = 'N';
     65c:	8e e4       	ldi	r24, 0x4E	; 78
     65e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
			break;
	}
	loop_count++;
     662:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
     66c:	08 95       	ret

0000066e <ENQUEUE>:
		MOVE_NEXT_NODE(X,Y,nextNode.X,nextNode.Y);
	}
}

void ENQUEUE(STRUCTURE q)
{
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	2a 97       	sbiw	r28, 0x0a	; 10
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	09 83       	std	Y+1, r16	; 0x01
     688:	1a 83       	std	Y+2, r17	; 0x02
     68a:	2b 83       	std	Y+3, r18	; 0x03
     68c:	3c 83       	std	Y+4, r19	; 0x04
     68e:	4d 83       	std	Y+5, r20	; 0x05
     690:	5e 83       	std	Y+6, r21	; 0x06
     692:	6f 83       	std	Y+7, r22	; 0x07
     694:	78 87       	std	Y+8, r23	; 0x08
     696:	89 87       	std	Y+9, r24	; 0x09
     698:	9a 87       	std	Y+10, r25	; 0x0a
	QUEUE[Qfront] = q;
     69a:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Qfront>
     69e:	82 2f       	mov	r24, r18
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	dc 01       	movw	r26, r24
     6a4:	aa 0f       	add	r26, r26
     6a6:	bb 1f       	adc	r27, r27
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	a8 0f       	add	r26, r24
     6b6:	b9 1f       	adc	r27, r25
     6b8:	a1 51       	subi	r26, 0x11	; 17
     6ba:	bd 4f       	sbci	r27, 0xFD	; 253
     6bc:	8a e0       	ldi	r24, 0x0A	; 10
     6be:	fe 01       	movw	r30, r28
     6c0:	31 96       	adiw	r30, 0x01	; 1
     6c2:	01 90       	ld	r0, Z+
     6c4:	0d 92       	st	X+, r0
     6c6:	8a 95       	dec	r24
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <ENQUEUE+0x54>
	Qfront++;
     6ca:	2f 5f       	subi	r18, 0xFF	; 255
     6cc:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <Qfront>
}
     6d0:	2a 96       	adiw	r28, 0x0a	; 10
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	08 95       	ret

000006e6 <DEQUEUE>:

STRUCTURE DEQUEUE()
{
	Qrear++;
     6e6:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <Qrear>
     6ea:	2f 5f       	subi	r18, 0xFF	; 255
     6ec:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <Qrear>
	return (QUEUE[Qrear-1]);
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	31 09       	sbc	r19, r1
     6f6:	f9 01       	movw	r30, r18
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	22 0f       	add	r18, r18
     6fe:	33 1f       	adc	r19, r19
     700:	22 0f       	add	r18, r18
     702:	33 1f       	adc	r19, r19
     704:	22 0f       	add	r18, r18
     706:	33 1f       	adc	r19, r19
     708:	e2 0f       	add	r30, r18
     70a:	f3 1f       	adc	r31, r19
     70c:	e1 51       	subi	r30, 0x11	; 17
     70e:	fd 4f       	sbci	r31, 0xFD	; 253
     710:	2a e0       	ldi	r18, 0x0A	; 10
     712:	dc 01       	movw	r26, r24
     714:	01 90       	ld	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	2a 95       	dec	r18
     71a:	e1 f7       	brne	.-8      	; 0x714 <DEQUEUE+0x2e>
}
     71c:	08 95       	ret

0000071e <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY>:
	return INFINITE;
}

void REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(unsigned char index, unsigned char arrayType)
{
	if(arrayType == BLOCK)
     71e:	62 30       	cpi	r22, 0x02	; 2
     720:	49 f5       	brne	.+82     	; 0x774 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0x56>
	{
		block[index] = block[blockCounter-1];
     722:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <blockCounter>
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	dc 01       	movw	r26, r24
     72a:	aa 0f       	add	r26, r26
     72c:	bb 1f       	adc	r27, r27
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	a8 0f       	add	r26, r24
     73c:	b9 1f       	adc	r27, r25
     73e:	ab 5a       	subi	r26, 0xAB	; 171
     740:	be 4f       	sbci	r27, 0xFE	; 254
     742:	82 2f       	mov	r24, r18
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	fc 01       	movw	r30, r24
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	e8 0f       	add	r30, r24
     75c:	f9 1f       	adc	r31, r25
     75e:	eb 5a       	subi	r30, 0xAB	; 171
     760:	fe 4f       	sbci	r31, 0xFE	; 254
     762:	8a e0       	ldi	r24, 0x0A	; 10
     764:	01 90       	ld	r0, Z+
     766:	0d 92       	st	X+, r0
     768:	8a 95       	dec	r24
     76a:	e1 f7       	brne	.-8      	; 0x764 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0x46>
		blockCounter--;
     76c:	21 50       	subi	r18, 0x01	; 1
     76e:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <blockCounter>
     772:	08 95       	ret
	}
	else if(arrayType == DESTINATION)
     774:	63 30       	cpi	r22, 0x03	; 3
     776:	41 f5       	brne	.+80     	; 0x7c8 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0xaa>
	{
		destination[index] = destination[destinationCounter-1];
     778:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	dc 01       	movw	r26, r24
     780:	aa 0f       	add	r26, r26
     782:	bb 1f       	adc	r27, r27
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	a8 0f       	add	r26, r24
     792:	b9 1f       	adc	r27, r25
     794:	af 52       	subi	r26, 0x2F	; 47
     796:	bd 4f       	sbci	r27, 0xFD	; 253
     798:	82 2f       	mov	r24, r18
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	fc 01       	movw	r30, r24
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	e8 0f       	add	r30, r24
     7b2:	f9 1f       	adc	r31, r25
     7b4:	ef 52       	subi	r30, 0x2F	; 47
     7b6:	fd 4f       	sbci	r31, 0xFD	; 253
     7b8:	8a e0       	ldi	r24, 0x0A	; 10
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	8a 95       	dec	r24
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0x9c>
		destinationCounter--;
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
     7c8:	08 95       	ret

000007ca <main>:
int main(void)
{
	unsigned char i=0;
	while(1)
	{
		if(mode == 0)
     7ca:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <mode>
     7ce:	81 11       	cpse	r24, r1
     7d0:	77 c0       	rjmp	.+238    	; 0x8c0 <__stack+0x61>
		{
			LCD_INITIALIZE();
     7d2:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_INITIALIZE>
			PORT_INITIALIZE();
     7d6:	0e 94 41 01 	call	0x282	; 0x282 <PORT_INITIALIZE>
			SET_INITIAL_INFO();
     7da:	0e 94 49 01 	call	0x292	; 0x292 <SET_INITIAL_INFO>
	}
}
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
     7de:	80 e8       	ldi	r24, 0x80	; 128
     7e0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
			PORT_INITIALIZE();
			SET_INITIAL_INFO();
			//TCCR1A = 0xA1; TCCR1B = 0x01;
			//OCR1A = 150; OCR1B = 150;
			LCD_SET_CURSER(1,1);
			LCD_PRINT("Welcome Hetauda!");
     7e4:	83 e6       	ldi	r24, 0x63	; 99
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
	else if(y==2)
	LCD_CMND(0xBF+x);
     7ec:	80 ec       	ldi	r24, 0xC0	; 192
     7ee:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
			//TCCR1A = 0xA1; TCCR1B = 0x01;
			//OCR1A = 150; OCR1B = 150;
			LCD_SET_CURSER(1,1);
			LCD_PRINT("Welcome Hetauda!");
			LCD_SET_CURSER(2,1);
			LCD_PRINT("Please Wait...");
     7f2:	84 e7       	ldi	r24, 0x74	; 116
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     7fa:	2f ef       	ldi	r18, 0xFF	; 255
     7fc:	83 ed       	ldi	r24, 0xD3	; 211
     7fe:	90 e3       	ldi	r25, 0x30	; 48
     800:	21 50       	subi	r18, 0x01	; 1
     802:	80 40       	sbci	r24, 0x00	; 0
     804:	90 40       	sbci	r25, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <main+0x36>
     808:	00 c0       	rjmp	.+0      	; 0x80a <main+0x40>
     80a:	00 00       	nop
			_delay_ms(1000);	
			LCD_CLEAR();
     80c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
			LCD_PRINT("  CAN INFOTECH");
     810:	83 e8       	ldi	r24, 0x83	; 131
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
	else if(y==2)
	LCD_CMND(0xBF+x);
     818:	80 ec       	ldi	r24, 0xC0	; 192
     81a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
			LCD_PRINT("Please Wait...");
			_delay_ms(1000);	
			LCD_CLEAR();
			LCD_PRINT("  CAN INFOTECH");
			LCD_SET_CURSER(2,1);
			LCD_PRINT("      2016");
     81e:	82 e9       	ldi	r24, 0x92	; 146
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     826:	ef ef       	ldi	r30, 0xFF	; 255
     828:	f3 ed       	ldi	r31, 0xD3	; 211
     82a:	20 e3       	ldi	r18, 0x30	; 48
     82c:	e1 50       	subi	r30, 0x01	; 1
     82e:	f0 40       	sbci	r31, 0x00	; 0
     830:	20 40       	sbci	r18, 0x00	; 0
     832:	e1 f7       	brne	.-8      	; 0x82c <main+0x62>
     834:	00 c0       	rjmp	.+0      	; 0x836 <main+0x6c>
     836:	00 00       	nop
				{
					SOUND_BUZZER();
					LCD_CLEAR();
					LCD_PRINT("BOT @ Start Node");
					_delay_ms(1000);
					currentMode = INTERMEDIATE_MODE;
     838:	c2 e0       	ldi	r28, 0x02	; 2
					FOLLOW_ONE_NODE(FORWARD);
			
			//------BLOCK SEARCH MODE STARTS HERE-------
					currentMode = BLOCK_SEARCH_MODE;
					X=0;Y=0;
					details1[0][0].status = VISITED;
     83a:	05 e8       	ldi	r16, 0x85	; 133
     83c:	13 e0       	ldi	r17, 0x03	; 3
     83e:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_NUM(BLOCK_DISTANCE());
				_delay_ms(100);
			}*/
			while(1)
			{
				if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b11100000)
     840:	99 b3       	in	r25, 0x19	; 25
     842:	90 7e       	andi	r25, 0xE0	; 224
     844:	90 3e       	cpi	r25, 0xE0	; 224
     846:	e1 f7       	brne	.-8      	; 0x840 <main+0x76>
				{
					SOUND_BUZZER();
     848:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SOUND_BUZZER>
					LCD_CLEAR();
     84c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
					LCD_PRINT("BOT @ Start Node");
     850:	8d e9       	ldi	r24, 0x9D	; 157
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	93 ed       	ldi	r25, 0xD3	; 211
     85c:	e0 e3       	ldi	r30, 0x30	; 48
     85e:	81 50       	subi	r24, 0x01	; 1
     860:	90 40       	sbci	r25, 0x00	; 0
     862:	e0 40       	sbci	r30, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <main+0x94>
     866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
     868:	00 00       	nop
					_delay_ms(1000);
					currentMode = INTERMEDIATE_MODE;
     86a:	c0 93 4e 01 	sts	0x014E, r28	; 0x80014e <currentMode>
					FOLLOW_ONE_NODE(FORWARD);
     86e:	8c 2f       	mov	r24, r28
     870:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
			
			//------BLOCK SEARCH MODE STARTS HERE-------
					currentMode = BLOCK_SEARCH_MODE;
     874:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <currentMode>
					X=0;Y=0;
     878:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <X>
     87c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <Y>
					details1[0][0].status = VISITED;
     880:	f8 01       	movw	r30, r16
     882:	d0 83       	st	Z, r29
					LCD_CLEAR();
     884:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
					LCD_PRINT("BLOCK SEARCH MOD");
     888:	8e ea       	ldi	r24, 0xAE	; 174
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     890:	ff ef       	ldi	r31, 0xFF	; 255
     892:	23 ed       	ldi	r18, 0xD3	; 211
     894:	80 e3       	ldi	r24, 0x30	; 48
     896:	f1 50       	subi	r31, 0x01	; 1
     898:	20 40       	sbci	r18, 0x00	; 0
     89a:	80 40       	sbci	r24, 0x00	; 0
     89c:	e1 f7       	brne	.-8      	; 0x896 <__stack+0x37>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <__stack+0x41>
     8a0:	00 00       	nop
					_delay_ms(1000);
					BOT_MOVE(FORWARD);
     8a2:	8c 2f       	mov	r24, r28
     8a4:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     8a8:	9f ef       	ldi	r25, 0xFF	; 255
     8aa:	e1 ee       	ldi	r30, 0xE1	; 225
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	91 50       	subi	r25, 0x01	; 1
     8b0:	e0 40       	sbci	r30, 0x00	; 0
     8b2:	f0 40       	sbci	r31, 0x00	; 0
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <__stack+0x4f>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
     8b8:	00 00       	nop
					_delay_ms(100);
					DETECT_NEXT_NODE();
     8ba:	0e 94 75 07 	call	0xeea	; 0xeea <DETECT_NEXT_NODE>
     8be:	c0 cf       	rjmp	.-128    	; 0x840 <main+0x76>
				
			//------BLOCK SEARCH MODE ENDS HERE-------
	
		}
			//------BLOCK SOLVE MODE STARTS HERE--------
			LCD_CLEAR();
     8c0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
			LCD_PRINT("  SOLVE MODE");
     8c4:	8f eb       	ldi	r24, 0xBF	; 191
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     8cc:	2f ef       	ldi	r18, 0xFF	; 255
     8ce:	83 ed       	ldi	r24, 0xD3	; 211
     8d0:	90 e3       	ldi	r25, 0x30	; 48
     8d2:	21 50       	subi	r18, 0x01	; 1
     8d4:	80 40       	sbci	r24, 0x00	; 0
     8d6:	90 40       	sbci	r25, 0x00	; 0
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <__stack+0x73>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <__stack+0x7d>
     8dc:	00 00       	nop
			_delay_ms(1000);
			currentMode = SOLVE_MODE;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <currentMode>
			DEFINE_DESTINATION();
     8e4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DEFINE_DESTINATION>
			for (i=0;i<ROUND1;i++)
			{
				MOVE_TO_NEAREST_BLOCK();
     8e8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <MOVE_TO_NEAREST_BLOCK>
				MOVE_TO_NEAREST_DESTINATION();
     8ec:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <MOVE_TO_NEAREST_DESTINATION>
			_delay_ms(1000);
			currentMode = SOLVE_MODE;
			DEFINE_DESTINATION();
			for (i=0;i<ROUND1;i++)
			{
				MOVE_TO_NEAREST_BLOCK();
     8f0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <MOVE_TO_NEAREST_BLOCK>
				MOVE_TO_NEAREST_DESTINATION();
     8f4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <MOVE_TO_NEAREST_DESTINATION>
			_delay_ms(1000);
			currentMode = SOLVE_MODE;
			DEFINE_DESTINATION();
			for (i=0;i<ROUND1;i++)
			{
				MOVE_TO_NEAREST_BLOCK();
     8f8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <MOVE_TO_NEAREST_BLOCK>
				MOVE_TO_NEAREST_DESTINATION();
     8fc:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <MOVE_TO_NEAREST_DESTINATION>
			}
			//------BLOCK SOLVE MODE ENDS HERE--------
			DIGKSTRA(X,Y,0,0,TRUE);
     900:	01 e0       	ldi	r16, 0x01	; 1
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <Y>
     90a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
     90e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <DIGKSTRA>
			BOT_STOP();
     912:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
			SOUND_BUZZER();
     916:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SOUND_BUZZER>
     91a:	ef ef       	ldi	r30, 0xFF	; 255
     91c:	f1 ee       	ldi	r31, 0xE1	; 225
     91e:	24 e0       	ldi	r18, 0x04	; 4
     920:	e1 50       	subi	r30, 0x01	; 1
     922:	f0 40       	sbci	r31, 0x00	; 0
     924:	20 40       	sbci	r18, 0x00	; 0
     926:	e1 f7       	brne	.-8      	; 0x920 <__stack+0xc1>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0xcb>
     92a:	00 00       	nop
			_delay_ms(100);
			SOUND_BUZZER();
     92c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SOUND_BUZZER>
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	91 ee       	ldi	r25, 0xE1	; 225
     934:	e4 e0       	ldi	r30, 0x04	; 4
     936:	81 50       	subi	r24, 0x01	; 1
     938:	90 40       	sbci	r25, 0x00	; 0
     93a:	e0 40       	sbci	r30, 0x00	; 0
     93c:	e1 f7       	brne	.-8      	; 0x936 <__stack+0xd7>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <__stack+0xe1>
     940:	00 00       	nop
			_delay_ms(100);
			SOUND_BUZZER();
     942:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SOUND_BUZZER>
			LCD_CLEAR();
     946:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
			LCD_PRINT("TASK COMPLETED!!");
     94a:	8c ec       	ldi	r24, 0xCC	; 204
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
			while(1)
			{
				;
			}
     952:	ff cf       	rjmp	.-2      	; 0x952 <__stack+0xf3>

00000954 <MOVE_BACK_IF_BLOCK>:
		MOTOR_PORT |= 0b00001000;
}

void MOVE_BACK_IF_BLOCK()
{
	BOT_MOVE(BACKWARD);
     954:	83 e0       	ldi	r24, 0x03	; 3
     956:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     95a:	2f ef       	ldi	r18, 0xFF	; 255
     95c:	81 ee       	ldi	r24, 0xE1	; 225
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	21 50       	subi	r18, 0x01	; 1
     962:	80 40       	sbci	r24, 0x00	; 0
     964:	90 40       	sbci	r25, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <MOVE_BACK_IF_BLOCK+0xc>
     968:	00 c0       	rjmp	.+0      	; 0x96a <MOVE_BACK_IF_BLOCK+0x16>
     96a:	00 00       	nop
	_delay_ms(100);
	BOT_STOP();
     96c:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
     970:	2f ef       	ldi	r18, 0xFF	; 255
     972:	81 ee       	ldi	r24, 0xE1	; 225
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	21 50       	subi	r18, 0x01	; 1
     978:	80 40       	sbci	r24, 0x00	; 0
     97a:	90 40       	sbci	r25, 0x00	; 0
     97c:	e1 f7       	brne	.-8      	; 0x976 <MOVE_BACK_IF_BLOCK+0x22>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <MOVE_BACK_IF_BLOCK+0x2c>
     980:	00 00       	nop
	_delay_ms(100);
	//PWM_SET();
	while((SENSOR_PIN & GRID_SENSOR_MASK) != 0b11100000)
     982:	89 b3       	in	r24, 0x19	; 25
     984:	80 7e       	andi	r24, 0xE0	; 224
     986:	80 3e       	cpi	r24, 0xE0	; 224
     988:	39 f0       	breq	.+14     	; 0x998 <MOVE_BACK_IF_BLOCK+0x44>
	{
		//OCR1A = 180;
		//OCR1B = 180;
		BOT_MOVE(BACKWARD);
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
	BOT_MOVE(BACKWARD);
	_delay_ms(100);
	BOT_STOP();
	_delay_ms(100);
	//PWM_SET();
	while((SENSOR_PIN & GRID_SENSOR_MASK) != 0b11100000)
     990:	89 b3       	in	r24, 0x19	; 25
     992:	80 7e       	andi	r24, 0xE0	; 224
     994:	80 3e       	cpi	r24, 0xE0	; 224
     996:	c9 f7       	brne	.-14     	; 0x98a <MOVE_BACK_IF_BLOCK+0x36>
	{
		//OCR1A = 180;
		//OCR1B = 180;
		BOT_MOVE(BACKWARD);
	}
	BOT_STOP();
     998:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
     99c:	2f ef       	ldi	r18, 0xFF	; 255
     99e:	81 ee       	ldi	r24, 0xE1	; 225
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	21 50       	subi	r18, 0x01	; 1
     9a4:	80 40       	sbci	r24, 0x00	; 0
     9a6:	90 40       	sbci	r25, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <MOVE_BACK_IF_BLOCK+0x4e>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <MOVE_BACK_IF_BLOCK+0x58>
     9ac:	00 00       	nop
	_delay_ms(100);
	BOT_MOVE(FORWARD);
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	9a e0       	ldi	r25, 0x0A	; 10
     9ba:	21 50       	subi	r18, 0x01	; 1
     9bc:	80 40       	sbci	r24, 0x00	; 0
     9be:	90 40       	sbci	r25, 0x00	; 0
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <MOVE_BACK_IF_BLOCK+0x66>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <MOVE_BACK_IF_BLOCK+0x70>
     9c4:	00 00       	nop
	_delay_ms(210);
	BOT_STOP();		
     9c6:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	if(dir == 'N')
     9ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     9ce:	8e 34       	cpi	r24, 0x4E	; 78
     9d0:	31 f4       	brne	.+12     	; 0x9de <MOVE_BACK_IF_BLOCK+0x8a>
	Y--;
     9d2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
     9d6:	81 50       	subi	r24, 0x01	; 1
     9d8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Y>
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <MOVE_BACK_IF_BLOCK+0xb8>
	else if(dir=='E')
     9de:	85 34       	cpi	r24, 0x45	; 69
     9e0:	31 f4       	brne	.+12     	; 0x9ee <MOVE_BACK_IF_BLOCK+0x9a>
	X++;
     9e2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
     9e6:	8f 5f       	subi	r24, 0xFF	; 255
     9e8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <X>
     9ec:	0f c0       	rjmp	.+30     	; 0xa0c <MOVE_BACK_IF_BLOCK+0xb8>
	else if(dir=='W')
     9ee:	87 35       	cpi	r24, 0x57	; 87
     9f0:	31 f4       	brne	.+12     	; 0x9fe <MOVE_BACK_IF_BLOCK+0xaa>
	X--;
     9f2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
     9f6:	81 50       	subi	r24, 0x01	; 1
     9f8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <X>
     9fc:	07 c0       	rjmp	.+14     	; 0xa0c <MOVE_BACK_IF_BLOCK+0xb8>
	else if(dir=='S')
     9fe:	83 35       	cpi	r24, 0x53	; 83
     a00:	29 f4       	brne	.+10     	; 0xa0c <MOVE_BACK_IF_BLOCK+0xb8>
	Y++	;
     a02:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
     a06:	8f 5f       	subi	r24, 0xFF	; 255
     a08:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Y>
	prev_count = TRUE;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <prev_count>
	if(currentMode == BLOCK_SEARCH_MODE && blockCounter < 3)	DETECT_NEXT_NODE();
     a12:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currentMode>
     a16:	81 11       	cpse	r24, r1
     a18:	40 c0       	rjmp	.+128    	; 0xa9a <MOVE_BACK_IF_BLOCK+0x146>
     a1a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <blockCounter>
     a1e:	83 30       	cpi	r24, 0x03	; 3
     a20:	d0 f5       	brcc	.+116    	; 0xa96 <MOVE_BACK_IF_BLOCK+0x142>
     a22:	0e 94 75 07 	call	0xeea	; 0xeea <DETECT_NEXT_NODE>
	if(blockCounter == 3 && currentMode == BLOCK_SEARCH_MODE)
     a26:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <blockCounter>
     a2a:	83 30       	cpi	r24, 0x03	; 3
     a2c:	b1 f5       	brne	.+108    	; 0xa9a <MOVE_BACK_IF_BLOCK+0x146>
     a2e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currentMode>
     a32:	81 11       	cpse	r24, r1
     a34:	32 c0       	rjmp	.+100    	; 0xa9a <MOVE_BACK_IF_BLOCK+0x146>
	{
		mode = 1;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <mode>
		currentMode = SOLVE_MODE;
     a3c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <currentMode>
		LCD_CLEAR();
     a40:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
		LCD_PRINT("NOW, ROBOT IS");
     a44:	8d ed       	ldi	r24, 0xDD	; 221
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
	else if(y==2)
	LCD_CMND(0xBF+x);
     a4c:	81 ec       	ldi	r24, 0xC1	; 193
     a4e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
		mode = 1;
		currentMode = SOLVE_MODE;
		LCD_CLEAR();
		LCD_PRINT("NOW, ROBOT IS");
		LCD_SET_CURSER(2,2);
		LCD_PRINT("at ");
     a52:	8b ee       	ldi	r24, 0xEB	; 235
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
		LCD_DATA('(');
     a5a:	88 e2       	ldi	r24, 0x28	; 40
     a5c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(X+0x30);
     a60:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
     a64:	80 5d       	subi	r24, 0xD0	; 208
     a66:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(',');
     a6a:	8c e2       	ldi	r24, 0x2C	; 44
     a6c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(Y+0x30);
     a70:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
     a74:	80 5d       	subi	r24, 0xD0	; 208
     a76:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(')');
     a7a:	89 e2       	ldi	r24, 0x29	; 41
     a7c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
     a80:	2f ef       	ldi	r18, 0xFF	; 255
     a82:	87 ea       	ldi	r24, 0xA7	; 167
     a84:	91 e6       	ldi	r25, 0x61	; 97
     a86:	21 50       	subi	r18, 0x01	; 1
     a88:	80 40       	sbci	r24, 0x00	; 0
     a8a:	90 40       	sbci	r25, 0x00	; 0
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <MOVE_BACK_IF_BLOCK+0x132>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <MOVE_BACK_IF_BLOCK+0x13c>
     a90:	00 00       	nop
		_delay_ms(2000);
		main();
     a92:	0e 94 e5 03 	call	0x7ca	; 0x7ca <main>
	X--;
	else if(dir=='S')
	Y++	;
	prev_count = TRUE;
	if(currentMode == BLOCK_SEARCH_MODE && blockCounter < 3)	DETECT_NEXT_NODE();
	if(blockCounter == 3 && currentMode == BLOCK_SEARCH_MODE)
     a96:	83 30       	cpi	r24, 0x03	; 3
     a98:	71 f2       	breq	.-100    	; 0xa36 <MOVE_BACK_IF_BLOCK+0xe2>
     a9a:	08 95       	ret

00000a9c <BLOCK_RECORD>:
	}
}

void BLOCK_RECORD()
{
	prev_block_detect = TRUE;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <prev_block_detect>
	if(currentMode == BLOCK_SEARCH_MODE)
     aa2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currentMode>
     aa6:	81 11       	cpse	r24, r1
     aa8:	7e c0       	rjmp	.+252    	; 0xba6 <BLOCK_RECORD+0x10a>
	{
		block[block_no].X = X;
     aaa:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <block_no>
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <X>
     ab4:	fc 01       	movw	r30, r24
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	e8 0f       	add	r30, r24
     ac8:	f9 1f       	adc	r31, r25
     aca:	eb 5a       	subi	r30, 0xAB	; 171
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	42 83       	std	Z+2, r20	; 0x02
		block[block_no].Y = Y;
     ad0:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <Y>
     ad4:	23 83       	std	Z+3, r18	; 0x03
		details1[X][Y].status = BLOCK;
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	c9 01       	movw	r24, r18
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	22 0f       	add	r18, r18
     ae0:	33 1f       	adc	r19, r19
     ae2:	22 0f       	add	r18, r18
     ae4:	33 1f       	adc	r19, r19
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	26 e4       	ldi	r18, 0x46	; 70
     af0:	42 9f       	mul	r20, r18
     af2:	80 0d       	add	r24, r0
     af4:	91 1d       	adc	r25, r1
     af6:	11 24       	eor	r1, r1
     af8:	fc 01       	movw	r30, r24
     afa:	eb 57       	subi	r30, 0x7B	; 123
     afc:	fc 4f       	sbci	r31, 0xFC	; 252
     afe:	22 e0       	ldi	r18, 0x02	; 2
     b00:	20 83       	st	Z, r18
		details2[X][Y].status = BLOCK;
     b02:	dc 01       	movw	r26, r24
     b04:	ad 58       	subi	r26, 0x8D	; 141
     b06:	be 4f       	sbci	r27, 0xFE	; 254
     b08:	2c 93       	st	X, r18
		details1[X][Y].priority = -1;
     b0a:	8f ef       	ldi	r24, 0xFF	; 255
     b0c:	81 83       	std	Z+1, r24	; 0x01
		LCD_CLEAR();
     b0e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
		LCD_PRINT("BLOCK");
     b12:	8f ee       	ldi	r24, 0xEF	; 239
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
		LCD_DATA(block_no+0x31);
     b1a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <block_no>
     b1e:	8f 5c       	subi	r24, 0xCF	; 207
     b20:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_PRINT(" @ ");
     b24:	85 ef       	ldi	r24, 0xF5	; 245
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
		LCD_DATA('(');
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(block[block_no].X+0x30);
     b32:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <block_no>
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	fc 01       	movw	r30, r24
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	e8 0f       	add	r30, r24
     b4c:	f9 1f       	adc	r31, r25
     b4e:	eb 5a       	subi	r30, 0xAB	; 171
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	82 81       	ldd	r24, Z+2	; 0x02
     b54:	80 5d       	subi	r24, 0xD0	; 208
     b56:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(',');
     b5a:	8c e2       	ldi	r24, 0x2C	; 44
     b5c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(block[block_no].Y+0x30);
     b60:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <block_no>
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	fc 01       	movw	r30, r24
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	e8 0f       	add	r30, r24
     b7a:	f9 1f       	adc	r31, r25
     b7c:	eb 5a       	subi	r30, 0xAB	; 171
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	83 81       	ldd	r24, Z+3	; 0x03
     b82:	80 5d       	subi	r24, 0xD0	; 208
     b84:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(')');
     b88:	89 e2       	ldi	r24, 0x29	; 41
     b8a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		coord_count++;
     b8e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <coord_count>
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <coord_count>
		blockCounter++;
     b98:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <blockCounter>
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <blockCounter>
		MOVE_BACK_IF_BLOCK();
     ba2:	0e 94 aa 04 	call	0x954	; 0x954 <MOVE_BACK_IF_BLOCK>
     ba6:	08 95       	ret

00000ba8 <DETECT_BLOCK>:
	SOUND_BUZZER();
}

char DETECT_BLOCK()
{
	if((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0b00000110 && prev_block_detect == FALSE && block_caught == FALSE)
     ba8:	89 b3       	in	r24, 0x19	; 25
     baa:	87 70       	andi	r24, 0x07	; 7
     bac:	86 30       	cpi	r24, 0x06	; 6
     bae:	91 f4       	brne	.+36     	; 0xbd4 <DETECT_BLOCK+0x2c>
     bb0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <prev_block_detect>
     bb4:	81 11       	cpse	r24, r1
     bb6:	44 c0       	rjmp	.+136    	; 0xc40 <DETECT_BLOCK+0x98>
     bb8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <block_caught>
     bbc:	81 11       	cpse	r24, r1
     bbe:	3b c0       	rjmp	.+118    	; 0xc36 <DETECT_BLOCK+0x8e>
	{
		BOT_STOP();
     bc0:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
		STOP_N_UPDATE_LOC();
     bc4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <STOP_N_UPDATE_LOC>
		block_no = 0;
     bc8:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <block_no>
		BLOCK_RECORD();
     bcc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <BLOCK_RECORD>
		return TRUE;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	08 95       	ret
	}
	else if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0b00000100 && prev_block_detect == FALSE && block_caught == FALSE)
     bd4:	89 b3       	in	r24, 0x19	; 25
     bd6:	87 70       	andi	r24, 0x07	; 7
     bd8:	84 30       	cpi	r24, 0x04	; 4
     bda:	99 f4       	brne	.+38     	; 0xc02 <DETECT_BLOCK+0x5a>
     bdc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <prev_block_detect>
     be0:	81 11       	cpse	r24, r1
     be2:	31 c0       	rjmp	.+98     	; 0xc46 <DETECT_BLOCK+0x9e>
     be4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <block_caught>
     be8:	81 11       	cpse	r24, r1
     bea:	2f c0       	rjmp	.+94     	; 0xc4a <DETECT_BLOCK+0xa2>
	{
		BOT_STOP();
     bec:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
		STOP_N_UPDATE_LOC();
     bf0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <STOP_N_UPDATE_LOC>
		block_no = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <block_no>
		BLOCK_RECORD();
     bfa:	0e 94 4e 05 	call	0xa9c	; 0xa9c <BLOCK_RECORD>
		return TRUE;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	08 95       	ret
	}
	else if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0b00000000 && prev_block_detect == FALSE && block_caught == FALSE)
     c02:	89 b3       	in	r24, 0x19	; 25
     c04:	87 70       	andi	r24, 0x07	; 7
     c06:	99 f4       	brne	.+38     	; 0xc2e <DETECT_BLOCK+0x86>
     c08:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <prev_block_detect>
     c0c:	81 11       	cpse	r24, r1
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <DETECT_BLOCK+0x86>
     c10:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <block_caught>
     c14:	81 11       	cpse	r24, r1
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <DETECT_BLOCK+0x86>
	{
		BOT_STOP();
     c18:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
		STOP_N_UPDATE_LOC();
     c1c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <STOP_N_UPDATE_LOC>
		block_no = 2;
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <block_no>
		BLOCK_RECORD();
     c26:	0e 94 4e 05 	call	0xa9c	; 0xa9c <BLOCK_RECORD>
		return TRUE;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	08 95       	ret
	}
	else //if(((SENSOR_PIN & 0x08) != 0x00 && block_caught == FALSE))
	{
		prev_block_detect =  FALSE;
     c2e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <prev_block_detect>
		return FALSE;
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	08 95       	ret
		STOP_N_UPDATE_LOC();
		block_no = 0;
		BLOCK_RECORD();
		return TRUE;
	}
	else if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0b00000100 && prev_block_detect == FALSE && block_caught == FALSE)
     c36:	89 b3       	in	r24, 0x19	; 25
     c38:	87 70       	andi	r24, 0x07	; 7
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	41 f4       	brne	.+16     	; 0xc4e <DETECT_BLOCK+0xa6>
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <DETECT_BLOCK+0xa2>
     c40:	89 b3       	in	r24, 0x19	; 25
		STOP_N_UPDATE_LOC();
		block_no = 1;
		BLOCK_RECORD();
		return TRUE;
	}
	else if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0b00000000 && prev_block_detect == FALSE && block_caught == FALSE)
     c42:	89 b3       	in	r24, 0x19	; 25
     c44:	f4 cf       	rjmp	.-24     	; 0xc2e <DETECT_BLOCK+0x86>
     c46:	89 b3       	in	r24, 0x19	; 25
     c48:	f2 cf       	rjmp	.-28     	; 0xc2e <DETECT_BLOCK+0x86>
     c4a:	89 b3       	in	r24, 0x19	; 25
     c4c:	f0 cf       	rjmp	.-32     	; 0xc2e <DETECT_BLOCK+0x86>
     c4e:	89 b3       	in	r24, 0x19	; 25
     c50:	87 70       	andi	r24, 0x07	; 7
     c52:	f1 f2       	breq	.-68     	; 0xc10 <DETECT_BLOCK+0x68>
     c54:	ec cf       	rjmp	.-40     	; 0xc2e <DETECT_BLOCK+0x86>

00000c56 <FOLLOW_LINE_FORWARD>:
	}
}

void FOLLOW_LINE_FORWARD()
{	
	if(DETECT_BLOCK() == TRUE)
     c56:	0e 94 d4 05 	call	0xba8	; 0xba8 <DETECT_BLOCK>
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	29 f4       	brne	.+10     	; 0xc68 <FOLLOW_LINE_FORWARD+0x12>
	{
		BOT_STOP();
     c5e:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
		SOUND_BUZZER();
     c62:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SOUND_BUZZER>
     c66:	08 95       	ret
	}
	
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0b11100000 && prev_count==FALSE)
     c68:	89 b3       	in	r24, 0x19	; 25
     c6a:	80 7e       	andi	r24, 0xE0	; 224
     c6c:	80 3e       	cpi	r24, 0xE0	; 224
     c6e:	09 f0       	breq	.+2      	; 0xc72 <FOLLOW_LINE_FORWARD+0x1c>
     c70:	53 c0       	rjmp	.+166    	; 0xd18 <FOLLOW_LINE_FORWARD+0xc2>
     c72:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <prev_count>
     c76:	81 11       	cpse	r24, r1
     c78:	4f c0       	rjmp	.+158    	; 0xd18 <FOLLOW_LINE_FORWARD+0xc2>
	{
		prev_count= TRUE;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <prev_count>
		count++;
     c80:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <count>
     c84:	8f 5f       	subi	r24, 0xFF	; 255
     c86:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <count>
		
		if(dir == 'N')
     c8a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     c8e:	8e 34       	cpi	r24, 0x4E	; 78
     c90:	31 f4       	brne	.+12     	; 0xc9e <FOLLOW_LINE_FORWARD+0x48>
		Y++;
     c92:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Y>
     c9c:	17 c0       	rjmp	.+46     	; 0xccc <FOLLOW_LINE_FORWARD+0x76>
		else if(dir=='E')
     c9e:	85 34       	cpi	r24, 0x45	; 69
     ca0:	31 f4       	brne	.+12     	; 0xcae <FOLLOW_LINE_FORWARD+0x58>
		X--;
     ca2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <X>
     cac:	0f c0       	rjmp	.+30     	; 0xccc <FOLLOW_LINE_FORWARD+0x76>
		else if(dir=='W')
     cae:	87 35       	cpi	r24, 0x57	; 87
     cb0:	31 f4       	brne	.+12     	; 0xcbe <FOLLOW_LINE_FORWARD+0x68>
		X++;
     cb2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <X>
     cbc:	07 c0       	rjmp	.+14     	; 0xccc <FOLLOW_LINE_FORWARD+0x76>
		else if(dir=='S')
     cbe:	83 35       	cpi	r24, 0x53	; 83
     cc0:	29 f4       	brne	.+10     	; 0xccc <FOLLOW_LINE_FORWARD+0x76>
		Y--;
     cc2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
     cc6:	81 50       	subi	r24, 0x01	; 1
     cc8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Y>
		if(currentMode == BLOCK_SEARCH_MODE)
     ccc:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currentMode>
     cd0:	81 11       	cpse	r24, r1
     cd2:	5d c0       	rjmp	.+186    	; 0xd8e <FOLLOW_LINE_FORWARD+0x138>
		{
			details1[X][Y].status = VISITED;
     cd4:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <X>
     cd8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	e8 0f       	add	r30, r24
     cf2:	f9 1f       	adc	r31, r25
     cf4:	86 e4       	ldi	r24, 0x46	; 70
     cf6:	28 9f       	mul	r18, r24
     cf8:	e0 0d       	add	r30, r0
     cfa:	f1 1d       	adc	r31, r1
     cfc:	11 24       	eor	r1, r1
     cfe:	eb 57       	subi	r30, 0x7B	; 123
     d00:	fc 4f       	sbci	r31, 0xFC	; 252
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 83       	st	Z, r24
			details1[X][Y].priority = 0;
     d06:	11 82       	std	Z+1, r1	; 0x01
			coord_count++;
     d08:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <coord_count>
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <coord_count>
			DETECT_NEXT_NODE();
     d12:	0e 94 75 07 	call	0xeea	; 0xeea <DETECT_NEXT_NODE>
     d16:	08 95       	ret
			//speed = 100;
		//}
		//_delay_ms(100);
	}
	
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0b11100000 && prev_count==TRUE)
     d18:	89 b3       	in	r24, 0x19	; 25
     d1a:	80 7e       	andi	r24, 0xE0	; 224
     d1c:	80 3e       	cpi	r24, 0xE0	; 224
     d1e:	41 f4       	brne	.+16     	; 0xd30 <FOLLOW_LINE_FORWARD+0xda>
     d20:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <prev_count>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	21 f4       	brne	.+8      	; 0xd30 <FOLLOW_LINE_FORWARD+0xda>
	{
		BOT_MOVE(FORWARD);
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     d2e:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0b01000000)
     d30:	89 b3       	in	r24, 0x19	; 25
     d32:	80 7e       	andi	r24, 0xE0	; 224
     d34:	80 34       	cpi	r24, 0x40	; 64
     d36:	31 f4       	brne	.+12     	; 0xd44 <FOLLOW_LINE_FORWARD+0xee>
	{
		BOT_MOVE(FORWARD);
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
		prev_count = FALSE;
     d3e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <prev_count>
     d42:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0b11000000)
     d44:	89 b3       	in	r24, 0x19	; 25
     d46:	80 7e       	andi	r24, 0xE0	; 224
     d48:	80 3c       	cpi	r24, 0xC0	; 192
     d4a:	21 f4       	brne	.+8      	; 0xd54 <FOLLOW_LINE_FORWARD+0xfe>
	{
		BOT_MOVE(LEFT);
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     d52:	08 95       	ret
		//prev_count = FALSE;
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0b10000000)
     d54:	89 b3       	in	r24, 0x19	; 25
     d56:	80 7e       	andi	r24, 0xE0	; 224
     d58:	80 38       	cpi	r24, 0x80	; 128
     d5a:	21 f4       	brne	.+8      	; 0xd64 <FOLLOW_LINE_FORWARD+0x10e>
	{
		BOT_MOVE(LEFT);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     d62:	08 95       	ret
		//prev_count = FALSE;
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0b01100000)
     d64:	89 b3       	in	r24, 0x19	; 25
     d66:	80 7e       	andi	r24, 0xE0	; 224
     d68:	80 36       	cpi	r24, 0x60	; 96
     d6a:	21 f4       	brne	.+8      	; 0xd74 <FOLLOW_LINE_FORWARD+0x11e>
	{
		BOT_MOVE(RIGHT);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     d72:	08 95       	ret
		//prev_count = FALSE;
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00100000)
     d74:	89 b3       	in	r24, 0x19	; 25
     d76:	80 7e       	andi	r24, 0xE0	; 224
     d78:	80 32       	cpi	r24, 0x20	; 32
     d7a:	21 f4       	brne	.+8      	; 0xd84 <FOLLOW_LINE_FORWARD+0x12e>
	{
		BOT_MOVE(RIGHT);
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
     d82:	08 95       	ret
		//prev_count = FALSE;
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00000000)
     d84:	89 b3       	in	r24, 0x19	; 25
     d86:	80 7e       	andi	r24, 0xE0	; 224
     d88:	11 f4       	brne	.+4      	; 0xd8e <FOLLOW_LINE_FORWARD+0x138>
	{
		BOT_STOP();
     d8a:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
     d8e:	08 95       	ret

00000d90 <FOLLOW_ONE_NODE>:
	loop_count++;
}

void FOLLOW_ONE_NODE(unsigned char direction)
{
	count = 0;
     d90:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <count>
	if(direction == FORWARD)
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	39 f4       	brne	.+14     	; 0xda6 <FOLLOW_ONE_NODE+0x16>
	{
		while (count == 0)
		{
			FOLLOW_LINE_FORWARD();
     d98:	0e 94 2b 06 	call	0xc56	; 0xc56 <FOLLOW_LINE_FORWARD>
void FOLLOW_ONE_NODE(unsigned char direction)
{
	count = 0;
	if(direction == FORWARD)
	{
		while (count == 0)
     d9c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <count>
     da0:	88 23       	and	r24, r24
     da2:	d1 f3       	breq	.-12     	; 0xd98 <FOLLOW_ONE_NODE+0x8>
     da4:	08 95       	ret
		{
			FOLLOW_LINE_FORWARD();
		}
		
	}
	else if(direction == BACKWARD)
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	31 f4       	brne	.+12     	; 0xdb6 <FOLLOW_ONE_NODE+0x26>
	{
		while(count == 0 )
		{
			FOLLOW_LINE_BACKWARD();
     daa:	0e 94 1b 02 	call	0x436	; 0x436 <FOLLOW_LINE_BACKWARD>
		}
		
	}
	else if(direction == BACKWARD)
	{
		while(count == 0 )
     dae:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <count>
     db2:	88 23       	and	r24, r24
     db4:	d1 f3       	breq	.-12     	; 0xdaa <FOLLOW_ONE_NODE+0x1a>
     db6:	08 95       	ret

00000db8 <MOVE_NEXT_NODE>:
	}
}

void MOVE_NEXT_NODE(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
	if(x2==x1 && y2==y1)
     db8:	48 13       	cpse	r20, r24
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <MOVE_NEXT_NODE+0xe>
     dbc:	26 13       	cpse	r18, r22
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <MOVE_NEXT_NODE+0xe>
	{
		BOT_STOP();
     dc0:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
     dc4:	08 95       	ret
	}
	if(y2>y1)
     dc6:	62 17       	cp	r22, r18
     dc8:	18 f5       	brcc	.+70     	; 0xe10 <MOVE_NEXT_NODE+0x58>
	{
		if(dir == 'N')
     dca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     dce:	8e 34       	cpi	r24, 0x4E	; 78
     dd0:	21 f4       	brne	.+8      	; 0xdda <MOVE_NEXT_NODE+0x22>
		{
			FOLLOW_ONE_NODE(FORWARD);
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     dd8:	08 95       	ret
		}
		else if(dir == 'E' )
     dda:	85 34       	cpi	r24, 0x45	; 69
     ddc:	39 f4       	brne	.+14     	; 0xdec <MOVE_NEXT_NODE+0x34>
		{
			TURN_90(LEFT);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 3c 02 	call	0x478	; 0x478 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     dea:	08 95       	ret
		}
		else if(dir == 'W')
     dec:	87 35       	cpi	r24, 0x57	; 87
     dee:	39 f4       	brne	.+14     	; 0xdfe <MOVE_NEXT_NODE+0x46>
		{
			TURN_90(RIGHT);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0e 94 3c 02 	call	0x478	; 0x478 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     dfc:	08 95       	ret
		}
		else if(dir == 'S')
     dfe:	83 35       	cpi	r24, 0x53	; 83
     e00:	09 f0       	breq	.+2      	; 0xe04 <MOVE_NEXT_NODE+0x4c>
     e02:	72 c0       	rjmp	.+228    	; 0xee8 <MOVE_NEXT_NODE+0x130>
		{
			TURN_180();
     e04:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     e0e:	08 95       	ret
		}
		
	}
	else if(y2<y1)
     e10:	26 17       	cp	r18, r22
     e12:	18 f5       	brcc	.+70     	; 0xe5a <MOVE_NEXT_NODE+0xa2>
	{
		if(dir == 'N')
     e14:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     e18:	8e 34       	cpi	r24, 0x4E	; 78
     e1a:	31 f4       	brne	.+12     	; 0xe28 <MOVE_NEXT_NODE+0x70>
		{
			TURN_180();
     e1c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     e26:	08 95       	ret
		}
		else if(dir == 'E' )
     e28:	85 34       	cpi	r24, 0x45	; 69
     e2a:	39 f4       	brne	.+14     	; 0xe3a <MOVE_NEXT_NODE+0x82>
		{
			TURN_90(RIGHT);
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 3c 02 	call	0x478	; 0x478 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     e38:	08 95       	ret
		}
		else if(dir == 'W')
     e3a:	87 35       	cpi	r24, 0x57	; 87
     e3c:	39 f4       	brne	.+14     	; 0xe4c <MOVE_NEXT_NODE+0x94>
		{
			TURN_90(LEFT);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0e 94 3c 02 	call	0x478	; 0x478 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     e4a:	08 95       	ret
		}
		else if(dir == 'S')
     e4c:	83 35       	cpi	r24, 0x53	; 83
     e4e:	09 f0       	breq	.+2      	; 0xe52 <MOVE_NEXT_NODE+0x9a>
     e50:	4b c0       	rjmp	.+150    	; 0xee8 <MOVE_NEXT_NODE+0x130>
		{
			FOLLOW_ONE_NODE(FORWARD);
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     e58:	08 95       	ret
		}
	}
	else if(x2>x1)
     e5a:	84 17       	cp	r24, r20
     e5c:	10 f5       	brcc	.+68     	; 0xea2 <MOVE_NEXT_NODE+0xea>
	{
		if(dir == 'N')
     e5e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     e62:	8e 34       	cpi	r24, 0x4E	; 78
     e64:	39 f4       	brne	.+14     	; 0xe74 <MOVE_NEXT_NODE+0xbc>
		{
			TURN_90(LEFT);
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 3c 02 	call	0x478	; 0x478 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     e72:	08 95       	ret
		}
		else if(dir == 'E' )
     e74:	85 34       	cpi	r24, 0x45	; 69
     e76:	31 f4       	brne	.+12     	; 0xe84 <MOVE_NEXT_NODE+0xcc>
		{
			TURN_180();
     e78:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     e82:	08 95       	ret
		}
		else if(dir == 'W')
     e84:	87 35       	cpi	r24, 0x57	; 87
     e86:	21 f4       	brne	.+8      	; 0xe90 <MOVE_NEXT_NODE+0xd8>
		{
			FOLLOW_ONE_NODE(FORWARD);
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     e8e:	08 95       	ret
		}
		else if(dir == 'S')
     e90:	83 35       	cpi	r24, 0x53	; 83
     e92:	51 f5       	brne	.+84     	; 0xee8 <MOVE_NEXT_NODE+0x130>
		{
			TURN_90(RIGHT);
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	0e 94 3c 02 	call	0x478	; 0x478 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     ea0:	08 95       	ret
		}
	}
	else if(x2<x1)
     ea2:	48 17       	cp	r20, r24
     ea4:	08 f5       	brcc	.+66     	; 0xee8 <MOVE_NEXT_NODE+0x130>
	{
		if(dir == 'N')
     ea6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     eaa:	8e 34       	cpi	r24, 0x4E	; 78
     eac:	39 f4       	brne	.+14     	; 0xebc <MOVE_NEXT_NODE+0x104>
		{
			TURN_90(RIGHT);
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	0e 94 3c 02 	call	0x478	; 0x478 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     eba:	08 95       	ret
		}
		else if(dir == 'E' )
     ebc:	85 34       	cpi	r24, 0x45	; 69
     ebe:	21 f4       	brne	.+8      	; 0xec8 <MOVE_NEXT_NODE+0x110>
		{
			FOLLOW_ONE_NODE(FORWARD);
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     ec6:	08 95       	ret
		}
		else if(dir == 'W')
     ec8:	87 35       	cpi	r24, 0x57	; 87
     eca:	31 f4       	brne	.+12     	; 0xed8 <MOVE_NEXT_NODE+0x120>
		{
			TURN_180();
     ecc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     ed6:	08 95       	ret
		}
		else if(dir == 'S')
     ed8:	83 35       	cpi	r24, 0x53	; 83
     eda:	31 f4       	brne	.+12     	; 0xee8 <MOVE_NEXT_NODE+0x130>
		{
			TURN_90(LEFT);
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 3c 02 	call	0x478	; 0x478 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
     ee8:	08 95       	ret

00000eea <DETECT_NEXT_NODE>:
		}
	}
}
void DETECT_NEXT_NODE()
{
     eea:	8f 92       	push	r8
     eec:	9f 92       	push	r9
     eee:	af 92       	push	r10
     ef0:	bf 92       	push	r11
     ef2:	cf 92       	push	r12
     ef4:	df 92       	push	r13
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
	unsigned char dir_count = 0;
	STRUCTURE nextNode;
	nextNode.X = X;
     f02:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <X>
	nextNode.Y = Y;
     f06:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <Y>
	nextNode.priority = 0;

	if((X-1) >= 0 && (X-1) < MAX_GRID_X)
     f0a:	e2 2f       	mov	r30, r18
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	df 01       	movw	r26, r30
     f10:	11 97       	sbiw	r26, 0x01	; 1
     f12:	a5 30       	cpi	r26, 0x05	; 5
     f14:	b1 05       	cpc	r27, r1
     f16:	a0 f5       	brcc	.+104    	; 0xf80 <DETECT_NEXT_NODE+0x96>
	{
		if(details1[X-1][Y].status == UNVISITED)
     f18:	83 2f       	mov	r24, r19
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	ec 01       	movw	r28, r24
     f1e:	cc 0f       	add	r28, r28
     f20:	dd 1f       	adc	r29, r29
     f22:	ac 01       	movw	r20, r24
     f24:	44 0f       	add	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	44 0f       	add	r20, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	44 0f       	add	r20, r20
     f2e:	55 1f       	adc	r21, r21
     f30:	c4 0f       	add	r28, r20
     f32:	d5 1f       	adc	r29, r21
     f34:	66 e4       	ldi	r22, 0x46	; 70
     f36:	6a 9f       	mul	r22, r26
     f38:	a0 01       	movw	r20, r0
     f3a:	6b 9f       	mul	r22, r27
     f3c:	50 0d       	add	r21, r0
     f3e:	11 24       	eor	r1, r1
     f40:	c4 0f       	add	r28, r20
     f42:	d5 1f       	adc	r29, r21
     f44:	cb 57       	subi	r28, 0x7B	; 123
     f46:	dc 4f       	sbci	r29, 0xFC	; 252
     f48:	48 81       	ld	r20, Y
     f4a:	41 11       	cpse	r20, r1
     f4c:	19 c0       	rjmp	.+50     	; 0xf80 <DETECT_NEXT_NODE+0x96>
		{
			details1[X-1][Y].priority++;
     f4e:	ac 01       	movw	r20, r24
     f50:	44 0f       	add	r20, r20
     f52:	55 1f       	adc	r21, r21
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	84 0f       	add	r24, r20
     f62:	95 1f       	adc	r25, r21
     f64:	46 e4       	ldi	r20, 0x46	; 70
     f66:	4a 9f       	mul	r20, r26
     f68:	e0 01       	movw	r28, r0
     f6a:	4b 9f       	mul	r20, r27
     f6c:	d0 0d       	add	r29, r0
     f6e:	11 24       	eor	r1, r1
     f70:	8c 0f       	add	r24, r28
     f72:	9d 1f       	adc	r25, r29
     f74:	ec 01       	movw	r28, r24
     f76:	cb 57       	subi	r28, 0x7B	; 123
     f78:	dc 4f       	sbci	r29, 0xFC	; 252
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	if((Y-1) >= 0 && (Y-1) < MAX_GRID_Y )
     f80:	83 2f       	mov	r24, r19
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	bc 01       	movw	r22, r24
     f86:	61 50       	subi	r22, 0x01	; 1
     f88:	71 09       	sbc	r23, r1
     f8a:	67 30       	cpi	r22, 0x07	; 7
     f8c:	71 05       	cpc	r23, r1
     f8e:	88 f5       	brcc	.+98     	; 0xff2 <DETECT_NEXT_NODE+0x108>
	{
		if(details1[X][Y-1].status == UNVISITED)
     f90:	ab 01       	movw	r20, r22
     f92:	44 0f       	add	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	44 0f       	add	r20, r20
     f98:	55 1f       	adc	r21, r21
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	eb 01       	movw	r28, r22
     fa0:	cc 0f       	add	r28, r28
     fa2:	dd 1f       	adc	r29, r29
     fa4:	c4 0f       	add	r28, r20
     fa6:	d5 1f       	adc	r29, r21
     fa8:	16 e4       	ldi	r17, 0x46	; 70
     faa:	1e 9f       	mul	r17, r30
     fac:	a0 01       	movw	r20, r0
     fae:	1f 9f       	mul	r17, r31
     fb0:	50 0d       	add	r21, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	c4 0f       	add	r28, r20
     fb6:	d5 1f       	adc	r29, r21
     fb8:	cb 57       	subi	r28, 0x7B	; 123
     fba:	dc 4f       	sbci	r29, 0xFC	; 252
     fbc:	48 81       	ld	r20, Y
     fbe:	41 11       	cpse	r20, r1
     fc0:	18 c0       	rjmp	.+48     	; 0xff2 <DETECT_NEXT_NODE+0x108>
		{
			details1[X][Y-1].priority++;
     fc2:	ab 01       	movw	r20, r22
     fc4:	44 0f       	add	r20, r20
     fc6:	55 1f       	adc	r21, r21
     fc8:	44 0f       	add	r20, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	44 0f       	add	r20, r20
     fce:	55 1f       	adc	r21, r21
     fd0:	eb 01       	movw	r28, r22
     fd2:	cc 0f       	add	r28, r28
     fd4:	dd 1f       	adc	r29, r29
     fd6:	c4 0f       	add	r28, r20
     fd8:	d5 1f       	adc	r29, r21
     fda:	1e 9f       	mul	r17, r30
     fdc:	a0 01       	movw	r20, r0
     fde:	1f 9f       	mul	r17, r31
     fe0:	50 0d       	add	r21, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	c4 0f       	add	r28, r20
     fe6:	d5 1f       	adc	r29, r21
     fe8:	cb 57       	subi	r28, 0x7B	; 123
     fea:	dc 4f       	sbci	r29, 0xFC	; 252
     fec:	49 81       	ldd	r20, Y+1	; 0x01
     fee:	4f 5f       	subi	r20, 0xFF	; 255
     ff0:	49 83       	std	Y+1, r20	; 0x01
		}
	}

	if((X+1) > 0 && (X+1) < MAX_GRID_X)
     ff2:	24 30       	cpi	r18, 0x04	; 4
     ff4:	b8 f5       	brcc	.+110    	; 0x1064 <DETECT_NEXT_NODE+0x17a>
	{
		if(details1[X+1][Y].status == UNVISITED)
     ff6:	8f 01       	movw	r16, r30
     ff8:	0f 5f       	subi	r16, 0xFF	; 255
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	ac 01       	movw	r20, r24
     ffe:	44 0f       	add	r20, r20
    1000:	55 1f       	adc	r21, r21
    1002:	44 0f       	add	r20, r20
    1004:	55 1f       	adc	r21, r21
    1006:	44 0f       	add	r20, r20
    1008:	55 1f       	adc	r21, r21
    100a:	ec 01       	movw	r28, r24
    100c:	cc 0f       	add	r28, r28
    100e:	dd 1f       	adc	r29, r29
    1010:	c4 0f       	add	r28, r20
    1012:	d5 1f       	adc	r29, r21
    1014:	0f 2e       	mov	r0, r31
    1016:	f6 e4       	ldi	r31, 0x46	; 70
    1018:	ff 2e       	mov	r15, r31
    101a:	f0 2d       	mov	r31, r0
    101c:	f0 9e       	mul	r15, r16
    101e:	a0 01       	movw	r20, r0
    1020:	f1 9e       	mul	r15, r17
    1022:	50 0d       	add	r21, r0
    1024:	11 24       	eor	r1, r1
    1026:	c4 0f       	add	r28, r20
    1028:	d5 1f       	adc	r29, r21
    102a:	cb 57       	subi	r28, 0x7B	; 123
    102c:	dc 4f       	sbci	r29, 0xFC	; 252
    102e:	48 81       	ld	r20, Y
    1030:	41 11       	cpse	r20, r1
    1032:	18 c0       	rjmp	.+48     	; 0x1064 <DETECT_NEXT_NODE+0x17a>
		{
			details1[X+1][Y].priority++;
    1034:	ac 01       	movw	r20, r24
    1036:	44 0f       	add	r20, r20
    1038:	55 1f       	adc	r21, r21
    103a:	44 0f       	add	r20, r20
    103c:	55 1f       	adc	r21, r21
    103e:	44 0f       	add	r20, r20
    1040:	55 1f       	adc	r21, r21
    1042:	ec 01       	movw	r28, r24
    1044:	cc 0f       	add	r28, r28
    1046:	dd 1f       	adc	r29, r29
    1048:	c4 0f       	add	r28, r20
    104a:	d5 1f       	adc	r29, r21
    104c:	f0 9e       	mul	r15, r16
    104e:	a0 01       	movw	r20, r0
    1050:	f1 9e       	mul	r15, r17
    1052:	50 0d       	add	r21, r0
    1054:	11 24       	eor	r1, r1
    1056:	c4 0f       	add	r28, r20
    1058:	d5 1f       	adc	r29, r21
    105a:	cb 57       	subi	r28, 0x7B	; 123
    105c:	dc 4f       	sbci	r29, 0xFC	; 252
    105e:	49 81       	ldd	r20, Y+1	; 0x01
    1060:	4f 5f       	subi	r20, 0xFF	; 255
    1062:	49 83       	std	Y+1, r20	; 0x01
		}
	}
	
	if((Y+1) > 0 && (Y+1) < MAX_GRID_Y )
    1064:	36 30       	cpi	r19, 0x06	; 6
    1066:	c0 f5       	brcc	.+112    	; 0x10d8 <DETECT_NEXT_NODE+0x1ee>
	{
		if(details1[X][Y+1].status == UNVISITED)
    1068:	ac 01       	movw	r20, r24
    106a:	4f 5f       	subi	r20, 0xFF	; 255
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	8a 01       	movw	r16, r20
    1070:	00 0f       	add	r16, r16
    1072:	11 1f       	adc	r17, r17
    1074:	ea 01       	movw	r28, r20
    1076:	cc 0f       	add	r28, r28
    1078:	dd 1f       	adc	r29, r29
    107a:	cc 0f       	add	r28, r28
    107c:	dd 1f       	adc	r29, r29
    107e:	cc 0f       	add	r28, r28
    1080:	dd 1f       	adc	r29, r29
    1082:	c0 0f       	add	r28, r16
    1084:	d1 1f       	adc	r29, r17
    1086:	0f 2e       	mov	r0, r31
    1088:	f6 e4       	ldi	r31, 0x46	; 70
    108a:	ff 2e       	mov	r15, r31
    108c:	f0 2d       	mov	r31, r0
    108e:	fe 9e       	mul	r15, r30
    1090:	80 01       	movw	r16, r0
    1092:	ff 9e       	mul	r15, r31
    1094:	10 0d       	add	r17, r0
    1096:	11 24       	eor	r1, r1
    1098:	c0 0f       	add	r28, r16
    109a:	d1 1f       	adc	r29, r17
    109c:	cb 57       	subi	r28, 0x7B	; 123
    109e:	dc 4f       	sbci	r29, 0xFC	; 252
    10a0:	c8 81       	ld	r28, Y
    10a2:	c1 11       	cpse	r28, r1
    10a4:	19 c0       	rjmp	.+50     	; 0x10d8 <DETECT_NEXT_NODE+0x1ee>
		{
			details1[X][Y+1].priority++;
    10a6:	ea 01       	movw	r28, r20
    10a8:	cc 0f       	add	r28, r28
    10aa:	dd 1f       	adc	r29, r29
    10ac:	44 0f       	add	r20, r20
    10ae:	55 1f       	adc	r21, r21
    10b0:	44 0f       	add	r20, r20
    10b2:	55 1f       	adc	r21, r21
    10b4:	44 0f       	add	r20, r20
    10b6:	55 1f       	adc	r21, r21
    10b8:	4c 0f       	add	r20, r28
    10ba:	5d 1f       	adc	r21, r29
    10bc:	16 e4       	ldi	r17, 0x46	; 70
    10be:	1e 9f       	mul	r17, r30
    10c0:	e0 01       	movw	r28, r0
    10c2:	1f 9f       	mul	r17, r31
    10c4:	d0 0d       	add	r29, r0
    10c6:	11 24       	eor	r1, r1
    10c8:	4c 0f       	add	r20, r28
    10ca:	5d 1f       	adc	r21, r29
    10cc:	ea 01       	movw	r28, r20
    10ce:	cb 57       	subi	r28, 0x7B	; 123
    10d0:	dc 4f       	sbci	r29, 0xFC	; 252
    10d2:	49 81       	ldd	r20, Y+1	; 0x01
    10d4:	4f 5f       	subi	r20, 0xFF	; 255
    10d6:	49 83       	std	Y+1, r20	; 0x01
		}
	}

	if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].priority > nextNode.priority) && (details1[X+1][Y].status == UNVISITED))
    10d8:	8f 01       	movw	r16, r30
    10da:	0f 5f       	subi	r16, 0xFF	; 255
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	05 30       	cpi	r16, 0x05	; 5
    10e0:	11 05       	cpc	r17, r1
    10e2:	ec f5       	brge	.+122    	; 0x115e <DETECT_NEXT_NODE+0x274>
    10e4:	ac 01       	movw	r20, r24
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	44 0f       	add	r20, r20
    10ec:	55 1f       	adc	r21, r21
    10ee:	44 0f       	add	r20, r20
    10f0:	55 1f       	adc	r21, r21
    10f2:	ec 01       	movw	r28, r24
    10f4:	cc 0f       	add	r28, r28
    10f6:	dd 1f       	adc	r29, r29
    10f8:	c4 0f       	add	r28, r20
    10fa:	d5 1f       	adc	r29, r21
    10fc:	0f 2e       	mov	r0, r31
    10fe:	f6 e4       	ldi	r31, 0x46	; 70
    1100:	ff 2e       	mov	r15, r31
    1102:	f0 2d       	mov	r31, r0
    1104:	f0 9e       	mul	r15, r16
    1106:	a0 01       	movw	r20, r0
    1108:	f1 9e       	mul	r15, r17
    110a:	50 0d       	add	r21, r0
    110c:	11 24       	eor	r1, r1
    110e:	c4 0f       	add	r28, r20
    1110:	d5 1f       	adc	r29, r21
    1112:	cb 57       	subi	r28, 0x7B	; 123
    1114:	dc 4f       	sbci	r29, 0xFC	; 252
    1116:	49 81       	ldd	r20, Y+1	; 0x01
    1118:	44 23       	and	r20, r20
    111a:	21 f1       	breq	.+72     	; 0x1164 <DETECT_NEXT_NODE+0x27a>
    111c:	ac 01       	movw	r20, r24
    111e:	44 0f       	add	r20, r20
    1120:	55 1f       	adc	r21, r21
    1122:	44 0f       	add	r20, r20
    1124:	55 1f       	adc	r21, r21
    1126:	44 0f       	add	r20, r20
    1128:	55 1f       	adc	r21, r21
    112a:	ec 01       	movw	r28, r24
    112c:	cc 0f       	add	r28, r28
    112e:	dd 1f       	adc	r29, r29
    1130:	c4 0f       	add	r28, r20
    1132:	d5 1f       	adc	r29, r21
    1134:	f0 9e       	mul	r15, r16
    1136:	a0 01       	movw	r20, r0
    1138:	f1 9e       	mul	r15, r17
    113a:	50 0d       	add	r21, r0
    113c:	11 24       	eor	r1, r1
    113e:	c4 0f       	add	r28, r20
    1140:	d5 1f       	adc	r29, r21
    1142:	cb 57       	subi	r28, 0x7B	; 123
    1144:	dc 4f       	sbci	r29, 0xFC	; 252
    1146:	48 81       	ld	r20, Y
    1148:	41 11       	cpse	r20, r1
    114a:	0f c0       	rjmp	.+30     	; 0x116a <DETECT_NEXT_NODE+0x280>
	{
		nextNode.X = X+1;
    114c:	ff 24       	eor	r15, r15
    114e:	f3 94       	inc	r15
    1150:	f2 0e       	add	r15, r18
		nextNode.Y = Y;
		dir_count = 1;
		loop_count = 1;
    1152:	41 e0       	ldi	r20, 0x01	; 1
    1154:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <__data_end>

	if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].priority > nextNode.priority) && (details1[X+1][Y].status == UNVISITED))
	{
		nextNode.X = X+1;
		nextNode.Y = Y;
		dir_count = 1;
    1158:	bb 24       	eor	r11, r11
    115a:	b3 94       	inc	r11
    115c:	08 c0       	rjmp	.+16     	; 0x116e <DETECT_NEXT_NODE+0x284>
}
void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
	STRUCTURE nextNode;
	nextNode.X = X;
    115e:	f2 2e       	mov	r15, r18
		}
	}
}
void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
    1160:	b1 2c       	mov	r11, r1
    1162:	05 c0       	rjmp	.+10     	; 0x116e <DETECT_NEXT_NODE+0x284>
	STRUCTURE nextNode;
	nextNode.X = X;
    1164:	f2 2e       	mov	r15, r18
		}
	}
}
void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
    1166:	b1 2c       	mov	r11, r1
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DETECT_NEXT_NODE+0x284>
	STRUCTURE nextNode;
	nextNode.X = X;
    116a:	f2 2e       	mov	r15, r18
		}
	}
}
void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
    116c:	b1 2c       	mov	r11, r1
		nextNode.Y = Y;
		dir_count = 1;
		loop_count = 1;
	}
	
	if(((Y-1)>=0) && (details1[X][Y-1].priority > nextNode.priority) && (details1[X][Y-1].status == UNVISITED))
    116e:	77 23       	and	r23, r23
    1170:	0c f4       	brge	.+2      	; 0x1174 <DETECT_NEXT_NODE+0x28a>
    1172:	3f c0       	rjmp	.+126    	; 0x11f2 <DETECT_NEXT_NODE+0x308>
    1174:	ab 01       	movw	r20, r22
    1176:	44 0f       	add	r20, r20
    1178:	55 1f       	adc	r21, r21
    117a:	44 0f       	add	r20, r20
    117c:	55 1f       	adc	r21, r21
    117e:	44 0f       	add	r20, r20
    1180:	55 1f       	adc	r21, r21
    1182:	eb 01       	movw	r28, r22
    1184:	cc 0f       	add	r28, r28
    1186:	dd 1f       	adc	r29, r29
    1188:	c4 0f       	add	r28, r20
    118a:	d5 1f       	adc	r29, r21
    118c:	0f 2e       	mov	r0, r31
    118e:	f6 e4       	ldi	r31, 0x46	; 70
    1190:	ef 2e       	mov	r14, r31
    1192:	f0 2d       	mov	r31, r0
    1194:	ee 9e       	mul	r14, r30
    1196:	a0 01       	movw	r20, r0
    1198:	ef 9e       	mul	r14, r31
    119a:	50 0d       	add	r21, r0
    119c:	11 24       	eor	r1, r1
    119e:	c4 0f       	add	r28, r20
    11a0:	d5 1f       	adc	r29, r21
    11a2:	cb 57       	subi	r28, 0x7B	; 123
    11a4:	dc 4f       	sbci	r29, 0xFC	; 252
    11a6:	49 81       	ldd	r20, Y+1	; 0x01
    11a8:	44 23       	and	r20, r20
    11aa:	29 f1       	breq	.+74     	; 0x11f6 <DETECT_NEXT_NODE+0x30c>
    11ac:	ab 01       	movw	r20, r22
    11ae:	44 0f       	add	r20, r20
    11b0:	55 1f       	adc	r21, r21
    11b2:	44 0f       	add	r20, r20
    11b4:	55 1f       	adc	r21, r21
    11b6:	44 0f       	add	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	eb 01       	movw	r28, r22
    11bc:	cc 0f       	add	r28, r28
    11be:	dd 1f       	adc	r29, r29
    11c0:	c4 0f       	add	r28, r20
    11c2:	d5 1f       	adc	r29, r21
    11c4:	ee 9e       	mul	r14, r30
    11c6:	a0 01       	movw	r20, r0
    11c8:	ef 9e       	mul	r14, r31
    11ca:	50 0d       	add	r21, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	c4 0f       	add	r28, r20
    11d0:	d5 1f       	adc	r29, r21
    11d2:	cb 57       	subi	r28, 0x7B	; 123
    11d4:	dc 4f       	sbci	r29, 0xFC	; 252
    11d6:	48 81       	ld	r20, Y
    11d8:	41 11       	cpse	r20, r1
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <DETECT_NEXT_NODE+0x310>
	{
		nextNode.X = X;
		nextNode.Y = Y-1;
    11dc:	ee 24       	eor	r14, r14
    11de:	ea 94       	dec	r14
    11e0:	e3 0e       	add	r14, r19
		dir_count = 2;
		loop_count = 1;
    11e2:	41 e0       	ldi	r20, 0x01	; 1
    11e4:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <__data_end>
		loop_count = 1;
	}
	
	if(((Y-1)>=0) && (details1[X][Y-1].priority > nextNode.priority) && (details1[X][Y-1].status == UNVISITED))
	{
		nextNode.X = X;
    11e8:	f2 2e       	mov	r15, r18
		nextNode.Y = Y-1;
		dir_count = 2;
    11ea:	68 94       	set
    11ec:	bb 24       	eor	r11, r11
    11ee:	b1 f8       	bld	r11, 1
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <DETECT_NEXT_NODE+0x312>
    11f2:	e3 2e       	mov	r14, r19
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <DETECT_NEXT_NODE+0x312>
    11f6:	e3 2e       	mov	r14, r19
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <DETECT_NEXT_NODE+0x312>
    11fa:	e3 2e       	mov	r14, r19
		loop_count = 1;
	}
	
	if(((X-1)>=0) && (details1[X-1][Y].priority > nextNode.priority) && (details1[X-1][Y].status == UNVISITED))
    11fc:	bb 23       	and	r27, r27
    11fe:	0c f4       	brge	.+2      	; 0x1202 <DETECT_NEXT_NODE+0x318>
    1200:	45 c0       	rjmp	.+138    	; 0x128c <DETECT_NEXT_NODE+0x3a2>
    1202:	ec 01       	movw	r28, r24
    1204:	cc 0f       	add	r28, r28
    1206:	dd 1f       	adc	r29, r29
    1208:	cc 0f       	add	r28, r28
    120a:	dd 1f       	adc	r29, r29
    120c:	cc 0f       	add	r28, r28
    120e:	dd 1f       	adc	r29, r29
    1210:	ac 01       	movw	r20, r24
    1212:	44 0f       	add	r20, r20
    1214:	55 1f       	adc	r21, r21
    1216:	c4 0f       	add	r28, r20
    1218:	d5 1f       	adc	r29, r21
    121a:	0f 2e       	mov	r0, r31
    121c:	f6 e4       	ldi	r31, 0x46	; 70
    121e:	df 2e       	mov	r13, r31
    1220:	f0 2d       	mov	r31, r0
    1222:	da 9e       	mul	r13, r26
    1224:	a0 01       	movw	r20, r0
    1226:	db 9e       	mul	r13, r27
    1228:	50 0d       	add	r21, r0
    122a:	11 24       	eor	r1, r1
    122c:	c4 0f       	add	r28, r20
    122e:	d5 1f       	adc	r29, r21
    1230:	cb 57       	subi	r28, 0x7B	; 123
    1232:	dc 4f       	sbci	r29, 0xFC	; 252
    1234:	49 81       	ldd	r20, Y+1	; 0x01
    1236:	44 23       	and	r20, r20
    1238:	49 f1       	breq	.+82     	; 0x128c <DETECT_NEXT_NODE+0x3a2>
    123a:	ec 01       	movw	r28, r24
    123c:	cc 0f       	add	r28, r28
    123e:	dd 1f       	adc	r29, r29
    1240:	cc 0f       	add	r28, r28
    1242:	dd 1f       	adc	r29, r29
    1244:	cc 0f       	add	r28, r28
    1246:	dd 1f       	adc	r29, r29
    1248:	ac 01       	movw	r20, r24
    124a:	44 0f       	add	r20, r20
    124c:	55 1f       	adc	r21, r21
    124e:	c4 0f       	add	r28, r20
    1250:	d5 1f       	adc	r29, r21
    1252:	da 9e       	mul	r13, r26
    1254:	a0 01       	movw	r20, r0
    1256:	db 9e       	mul	r13, r27
    1258:	50 0d       	add	r21, r0
    125a:	11 24       	eor	r1, r1
    125c:	c4 0f       	add	r28, r20
    125e:	d5 1f       	adc	r29, r21
    1260:	cb 57       	subi	r28, 0x7B	; 123
    1262:	dc 4f       	sbci	r29, 0xFC	; 252
    1264:	48 81       	ld	r20, Y
    1266:	41 11       	cpse	r20, r1
    1268:	11 c0       	rjmp	.+34     	; 0x128c <DETECT_NEXT_NODE+0x3a2>
	{
		nextNode.X = X-1;
    126a:	ff 24       	eor	r15, r15
    126c:	fa 94       	dec	r15
    126e:	f2 0e       	add	r15, r18
		nextNode.Y = Y;
		dir_count = 3;
		loop_count = 1;
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <__data_end>
	}
	
	if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].priority > nextNode.priority) && (details1[X][Y+1].status == UNVISITED))
    1276:	4c 01       	movw	r8, r24
    1278:	4f ef       	ldi	r20, 0xFF	; 255
    127a:	84 1a       	sub	r8, r20
    127c:	94 0a       	sbc	r9, r20
    127e:	c7 e0       	ldi	r28, 0x07	; 7
    1280:	8c 16       	cp	r8, r28
    1282:	91 04       	cpc	r9, r1
    1284:	0c f4       	brge	.+2      	; 0x1288 <DETECT_NEXT_NODE+0x39e>
    1286:	de c1       	rjmp	.+956    	; 0x1644 <DETECT_NEXT_NODE+0x75a>
	}
	
	if(((X-1)>=0) && (details1[X-1][Y].priority > nextNode.priority) && (details1[X-1][Y].status == UNVISITED))
	{
		nextNode.X = X-1;
		nextNode.Y = Y;
    1288:	e3 2e       	mov	r14, r19
    128a:	fb c1       	rjmp	.+1014   	; 0x1682 <DETECT_NEXT_NODE+0x798>
		dir_count = 3;
		loop_count = 1;
	}
	
	if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].priority > nextNode.priority) && (details1[X][Y+1].status == UNVISITED))
    128c:	4c 01       	movw	r8, r24
    128e:	df ef       	ldi	r29, 0xFF	; 255
    1290:	8d 1a       	sub	r8, r29
    1292:	9d 0a       	sbc	r9, r29
    1294:	47 e0       	ldi	r20, 0x07	; 7
    1296:	84 16       	cp	r8, r20
    1298:	91 04       	cpc	r9, r1
    129a:	0c f0       	brlt	.+2      	; 0x129e <DETECT_NEXT_NODE+0x3b4>
    129c:	d0 c1       	rjmp	.+928    	; 0x163e <DETECT_NEXT_NODE+0x754>
    129e:	64 01       	movw	r12, r8
    12a0:	cc 0c       	add	r12, r12
    12a2:	dd 1c       	adc	r13, r13
    12a4:	cc 0c       	add	r12, r12
    12a6:	dd 1c       	adc	r13, r13
    12a8:	cc 0c       	add	r12, r12
    12aa:	dd 1c       	adc	r13, r13
    12ac:	a4 01       	movw	r20, r8
    12ae:	44 0f       	add	r20, r20
    12b0:	55 1f       	adc	r21, r21
    12b2:	c4 0e       	add	r12, r20
    12b4:	d5 1e       	adc	r13, r21
    12b6:	0f 2e       	mov	r0, r31
    12b8:	f6 e4       	ldi	r31, 0x46	; 70
    12ba:	af 2e       	mov	r10, r31
    12bc:	f0 2d       	mov	r31, r0
    12be:	ae 9e       	mul	r10, r30
    12c0:	a0 01       	movw	r20, r0
    12c2:	af 9e       	mul	r10, r31
    12c4:	50 0d       	add	r21, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	4c 0d       	add	r20, r12
    12ca:	5d 1d       	adc	r21, r13
    12cc:	4b 57       	subi	r20, 0x7B	; 123
    12ce:	5c 4f       	sbci	r21, 0xFC	; 252
    12d0:	ea 01       	movw	r28, r20
    12d2:	49 81       	ldd	r20, Y+1	; 0x01
    12d4:	44 23       	and	r20, r20
    12d6:	09 f4       	brne	.+2      	; 0x12da <DETECT_NEXT_NODE+0x3f0>
    12d8:	a9 c1       	rjmp	.+850    	; 0x162c <DETECT_NEXT_NODE+0x742>
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <DETECT_NEXT_NODE+0x3fc>
	}
	
	if(((X-1)>=0) && (details1[X-1][Y].priority > nextNode.priority) && (details1[X-1][Y].status == UNVISITED))
	{
		nextNode.X = X-1;
		nextNode.Y = Y;
    12dc:	e3 2e       	mov	r14, r19
		dir_count = 3;
    12de:	0f 2e       	mov	r0, r31
    12e0:	f3 e0       	ldi	r31, 0x03	; 3
    12e2:	bf 2e       	mov	r11, r31
    12e4:	f0 2d       	mov	r31, r0
		loop_count = 1;
	}
	
	if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].priority > nextNode.priority) && (details1[X][Y+1].status == UNVISITED))
    12e6:	64 01       	movw	r12, r8
    12e8:	cc 0c       	add	r12, r12
    12ea:	dd 1c       	adc	r13, r13
    12ec:	cc 0c       	add	r12, r12
    12ee:	dd 1c       	adc	r13, r13
    12f0:	cc 0c       	add	r12, r12
    12f2:	dd 1c       	adc	r13, r13
    12f4:	a4 01       	movw	r20, r8
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	c4 0e       	add	r12, r20
    12fc:	d5 1e       	adc	r13, r21
    12fe:	0f 2e       	mov	r0, r31
    1300:	f6 e4       	ldi	r31, 0x46	; 70
    1302:	af 2e       	mov	r10, r31
    1304:	f0 2d       	mov	r31, r0
    1306:	ae 9e       	mul	r10, r30
    1308:	a0 01       	movw	r20, r0
    130a:	af 9e       	mul	r10, r31
    130c:	50 0d       	add	r21, r0
    130e:	11 24       	eor	r1, r1
    1310:	4c 0d       	add	r20, r12
    1312:	5d 1d       	adc	r21, r13
    1314:	4b 57       	subi	r20, 0x7B	; 123
    1316:	5c 4f       	sbci	r21, 0xFC	; 252
    1318:	ea 01       	movw	r28, r20
    131a:	48 81       	ld	r20, Y
    131c:	41 11       	cpse	r20, r1
    131e:	86 c1       	rjmp	.+780    	; 0x162c <DETECT_NEXT_NODE+0x742>
	{
		nextNode.X = X;
		nextNode.Y = Y+1;
    1320:	ee 24       	eor	r14, r14
    1322:	e3 94       	inc	r14
    1324:	e3 0e       	add	r14, r19
		dir_count = 4;
		loop_count = 1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
		loop_count = 1;
	}
	
	if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].priority > nextNode.priority) && (details1[X][Y+1].status == UNVISITED))
	{
		nextNode.X = X;
    132c:	f2 2e       	mov	r15, r18
    132e:	a9 c1       	rjmp	.+850    	; 0x1682 <DETECT_NEXT_NODE+0x798>
	{
		loop_count++;
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status == VISITED))
		{
			nextNode.X = X;
			nextNode.Y = Y+1;
    1330:	ee 24       	eor	r14, r14
    1332:	e3 94       	inc	r14
    1334:	e3 0e       	add	r14, r19
	if (dir_count == 0)
	{
		loop_count++;
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status == VISITED))
		{
			nextNode.X = X;
    1336:	f2 2e       	mov	r15, r18
			nextNode.Y = Y+1;
		}
		if(((X-1)>=0) && (details1[X-1][Y].status == VISITED))
    1338:	bb 23       	and	r27, r27
    133a:	0c f1       	brlt	.+66     	; 0x137e <DETECT_NEXT_NODE+0x494>
    133c:	6c 01       	movw	r12, r24
    133e:	cc 0c       	add	r12, r12
    1340:	dd 1c       	adc	r13, r13
    1342:	cc 0c       	add	r12, r12
    1344:	dd 1c       	adc	r13, r13
    1346:	cc 0c       	add	r12, r12
    1348:	dd 1c       	adc	r13, r13
    134a:	ac 01       	movw	r20, r24
    134c:	44 0f       	add	r20, r20
    134e:	55 1f       	adc	r21, r21
    1350:	c4 0e       	add	r12, r20
    1352:	d5 1e       	adc	r13, r21
    1354:	0f 2e       	mov	r0, r31
    1356:	f6 e4       	ldi	r31, 0x46	; 70
    1358:	bf 2e       	mov	r11, r31
    135a:	f0 2d       	mov	r31, r0
    135c:	ba 9e       	mul	r11, r26
    135e:	a0 01       	movw	r20, r0
    1360:	bb 9e       	mul	r11, r27
    1362:	50 0d       	add	r21, r0
    1364:	11 24       	eor	r1, r1
    1366:	4c 0d       	add	r20, r12
    1368:	5d 1d       	adc	r21, r13
    136a:	4b 57       	subi	r20, 0x7B	; 123
    136c:	5c 4f       	sbci	r21, 0xFC	; 252
    136e:	ea 01       	movw	r28, r20
    1370:	48 81       	ld	r20, Y
    1372:	41 30       	cpi	r20, 0x01	; 1
    1374:	21 f4       	brne	.+8      	; 0x137e <DETECT_NEXT_NODE+0x494>
		{
			nextNode.X = X-1;
    1376:	ff 24       	eor	r15, r15
    1378:	fa 94       	dec	r15
    137a:	f2 0e       	add	r15, r18
			nextNode.Y = Y;
    137c:	e3 2e       	mov	r14, r19
		}
		if(((Y-1)>=0) && (details1[X][Y-1].status == VISITED))
    137e:	77 23       	and	r23, r23
    1380:	0c f1       	brlt	.+66     	; 0x13c4 <DETECT_NEXT_NODE+0x4da>
    1382:	6b 01       	movw	r12, r22
    1384:	cc 0c       	add	r12, r12
    1386:	dd 1c       	adc	r13, r13
    1388:	cc 0c       	add	r12, r12
    138a:	dd 1c       	adc	r13, r13
    138c:	cc 0c       	add	r12, r12
    138e:	dd 1c       	adc	r13, r13
    1390:	ab 01       	movw	r20, r22
    1392:	44 0f       	add	r20, r20
    1394:	55 1f       	adc	r21, r21
    1396:	c4 0e       	add	r12, r20
    1398:	d5 1e       	adc	r13, r21
    139a:	0f 2e       	mov	r0, r31
    139c:	f6 e4       	ldi	r31, 0x46	; 70
    139e:	bf 2e       	mov	r11, r31
    13a0:	f0 2d       	mov	r31, r0
    13a2:	be 9e       	mul	r11, r30
    13a4:	a0 01       	movw	r20, r0
    13a6:	bf 9e       	mul	r11, r31
    13a8:	50 0d       	add	r21, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	4c 0d       	add	r20, r12
    13ae:	5d 1d       	adc	r21, r13
    13b0:	4b 57       	subi	r20, 0x7B	; 123
    13b2:	5c 4f       	sbci	r21, 0xFC	; 252
    13b4:	ea 01       	movw	r28, r20
    13b6:	48 81       	ld	r20, Y
    13b8:	41 30       	cpi	r20, 0x01	; 1
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <DETECT_NEXT_NODE+0x4da>
		{
			nextNode.X = X;
			nextNode.Y = Y-1;
    13bc:	ee 24       	eor	r14, r14
    13be:	ea 94       	dec	r14
    13c0:	e3 0e       	add	r14, r19
			nextNode.X = X-1;
			nextNode.Y = Y;
		}
		if(((Y-1)>=0) && (details1[X][Y-1].status == VISITED))
		{
			nextNode.X = X;
    13c2:	f2 2e       	mov	r15, r18
			nextNode.Y = Y-1;
		}
		if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].status == VISITED))
    13c4:	05 30       	cpi	r16, 0x05	; 5
    13c6:	11 05       	cpc	r17, r1
    13c8:	0c f5       	brge	.+66     	; 0x140c <DETECT_NEXT_NODE+0x522>
    13ca:	6c 01       	movw	r12, r24
    13cc:	cc 0c       	add	r12, r12
    13ce:	dd 1c       	adc	r13, r13
    13d0:	cc 0c       	add	r12, r12
    13d2:	dd 1c       	adc	r13, r13
    13d4:	cc 0c       	add	r12, r12
    13d6:	dd 1c       	adc	r13, r13
    13d8:	ac 01       	movw	r20, r24
    13da:	44 0f       	add	r20, r20
    13dc:	55 1f       	adc	r21, r21
    13de:	c4 0e       	add	r12, r20
    13e0:	d5 1e       	adc	r13, r21
    13e2:	0f 2e       	mov	r0, r31
    13e4:	f6 e4       	ldi	r31, 0x46	; 70
    13e6:	bf 2e       	mov	r11, r31
    13e8:	f0 2d       	mov	r31, r0
    13ea:	b0 9e       	mul	r11, r16
    13ec:	a0 01       	movw	r20, r0
    13ee:	b1 9e       	mul	r11, r17
    13f0:	50 0d       	add	r21, r0
    13f2:	11 24       	eor	r1, r1
    13f4:	4c 0d       	add	r20, r12
    13f6:	5d 1d       	adc	r21, r13
    13f8:	4b 57       	subi	r20, 0x7B	; 123
    13fa:	5c 4f       	sbci	r21, 0xFC	; 252
    13fc:	ea 01       	movw	r28, r20
    13fe:	48 81       	ld	r20, Y
    1400:	41 30       	cpi	r20, 0x01	; 1
    1402:	21 f4       	brne	.+8      	; 0x140c <DETECT_NEXT_NODE+0x522>
		{
			nextNode.X = X+1;
    1404:	ff 24       	eor	r15, r15
    1406:	f3 94       	inc	r15
    1408:	f2 0e       	add	r15, r18
			nextNode.Y = Y;
    140a:	e3 2e       	mov	r14, r19
		}
		details1[X][Y].status = BLOCK;
    140c:	6c 01       	movw	r12, r24
    140e:	cc 0c       	add	r12, r12
    1410:	dd 1c       	adc	r13, r13
    1412:	cc 0c       	add	r12, r12
    1414:	dd 1c       	adc	r13, r13
    1416:	cc 0c       	add	r12, r12
    1418:	dd 1c       	adc	r13, r13
    141a:	ac 01       	movw	r20, r24
    141c:	44 0f       	add	r20, r20
    141e:	55 1f       	adc	r21, r21
    1420:	c4 0e       	add	r12, r20
    1422:	d5 1e       	adc	r13, r21
    1424:	0f 2e       	mov	r0, r31
    1426:	f6 e4       	ldi	r31, 0x46	; 70
    1428:	bf 2e       	mov	r11, r31
    142a:	f0 2d       	mov	r31, r0
    142c:	be 9e       	mul	r11, r30
    142e:	a0 01       	movw	r20, r0
    1430:	bf 9e       	mul	r11, r31
    1432:	50 0d       	add	r21, r0
    1434:	11 24       	eor	r1, r1
    1436:	4c 0d       	add	r20, r12
    1438:	5d 1d       	adc	r21, r13
    143a:	4b 57       	subi	r20, 0x7B	; 123
    143c:	5c 4f       	sbci	r21, 0xFC	; 252
    143e:	68 94       	set
    1440:	dd 24       	eor	r13, r13
    1442:	d1 f8       	bld	r13, 1
    1444:	ea 01       	movw	r28, r20
    1446:	d8 82       	st	Y, r13
	}
	loop_count--;
    1448:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <__data_end>
    144c:	41 50       	subi	r20, 0x01	; 1
    144e:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <__data_end>
	if (loop_count > 4 && currentMode == BLOCK_SEARCH_MODE)
    1452:	45 30       	cpi	r20, 0x05	; 5
    1454:	08 f4       	brcc	.+2      	; 0x1458 <DETECT_NEXT_NODE+0x56e>
    1456:	8a c0       	rjmp	.+276    	; 0x156c <DETECT_NEXT_NODE+0x682>
    1458:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <currentMode>
    145c:	41 11       	cpse	r20, r1
    145e:	86 c0       	rjmp	.+268    	; 0x156c <DETECT_NEXT_NODE+0x682>
	{
		loop_count = 5;
    1460:	45 e0       	ldi	r20, 0x05	; 5
    1462:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <__data_end>
		if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].status == VISITED))
    1466:	05 30       	cpi	r16, 0x05	; 5
    1468:	11 05       	cpc	r17, r1
    146a:	0c f5       	brge	.+66     	; 0x14ae <DETECT_NEXT_NODE+0x5c4>
    146c:	6c 01       	movw	r12, r24
    146e:	cc 0c       	add	r12, r12
    1470:	dd 1c       	adc	r13, r13
    1472:	cc 0c       	add	r12, r12
    1474:	dd 1c       	adc	r13, r13
    1476:	cc 0c       	add	r12, r12
    1478:	dd 1c       	adc	r13, r13
    147a:	ac 01       	movw	r20, r24
    147c:	44 0f       	add	r20, r20
    147e:	55 1f       	adc	r21, r21
    1480:	c4 0e       	add	r12, r20
    1482:	d5 1e       	adc	r13, r21
    1484:	0f 2e       	mov	r0, r31
    1486:	f6 e4       	ldi	r31, 0x46	; 70
    1488:	bf 2e       	mov	r11, r31
    148a:	f0 2d       	mov	r31, r0
    148c:	b0 9e       	mul	r11, r16
    148e:	a0 01       	movw	r20, r0
    1490:	b1 9e       	mul	r11, r17
    1492:	50 0d       	add	r21, r0
    1494:	11 24       	eor	r1, r1
    1496:	4c 0d       	add	r20, r12
    1498:	5d 1d       	adc	r21, r13
    149a:	4b 57       	subi	r20, 0x7B	; 123
    149c:	5c 4f       	sbci	r21, 0xFC	; 252
    149e:	ea 01       	movw	r28, r20
    14a0:	48 81       	ld	r20, Y
    14a2:	41 30       	cpi	r20, 0x01	; 1
    14a4:	21 f4       	brne	.+8      	; 0x14ae <DETECT_NEXT_NODE+0x5c4>
		{
			nextNode.X = X+1;
    14a6:	ff 24       	eor	r15, r15
    14a8:	f3 94       	inc	r15
    14aa:	f2 0e       	add	r15, r18
			nextNode.Y = Y;
    14ac:	e3 2e       	mov	r14, r19
		}
		
		if(((Y-1)>=0) && (details1[X][Y-1].status == VISITED))
    14ae:	77 23       	and	r23, r23
    14b0:	ec f0       	brlt	.+58     	; 0x14ec <DETECT_NEXT_NODE+0x602>
    14b2:	ab 01       	movw	r20, r22
    14b4:	44 0f       	add	r20, r20
    14b6:	55 1f       	adc	r21, r21
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	66 0f       	add	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	64 0f       	add	r22, r20
    14c6:	75 1f       	adc	r23, r21
    14c8:	16 e4       	ldi	r17, 0x46	; 70
    14ca:	1e 9f       	mul	r17, r30
    14cc:	a0 01       	movw	r20, r0
    14ce:	1f 9f       	mul	r17, r31
    14d0:	50 0d       	add	r21, r0
    14d2:	11 24       	eor	r1, r1
    14d4:	64 0f       	add	r22, r20
    14d6:	75 1f       	adc	r23, r21
    14d8:	6b 57       	subi	r22, 0x7B	; 123
    14da:	7c 4f       	sbci	r23, 0xFC	; 252
    14dc:	eb 01       	movw	r28, r22
    14de:	48 81       	ld	r20, Y
    14e0:	41 30       	cpi	r20, 0x01	; 1
    14e2:	21 f4       	brne	.+8      	; 0x14ec <DETECT_NEXT_NODE+0x602>
		{
			nextNode.X = X;
			nextNode.Y = Y-1;
    14e4:	ee 24       	eor	r14, r14
    14e6:	ea 94       	dec	r14
    14e8:	e3 0e       	add	r14, r19
			nextNode.Y = Y;
		}
		
		if(((Y-1)>=0) && (details1[X][Y-1].status == VISITED))
		{
			nextNode.X = X;
    14ea:	f2 2e       	mov	r15, r18
			nextNode.Y = Y-1;
		}
		
		if(((X-1)>=0) && (details1[X-1][Y].status == VISITED))
    14ec:	bb 23       	and	r27, r27
    14ee:	ec f0       	brlt	.+58     	; 0x152a <DETECT_NEXT_NODE+0x640>
    14f0:	ac 01       	movw	r20, r24
    14f2:	44 0f       	add	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	84 0f       	add	r24, r20
    1504:	95 1f       	adc	r25, r21
    1506:	66 e4       	ldi	r22, 0x46	; 70
    1508:	6a 9f       	mul	r22, r26
    150a:	a0 01       	movw	r20, r0
    150c:	6b 9f       	mul	r22, r27
    150e:	50 0d       	add	r21, r0
    1510:	11 24       	eor	r1, r1
    1512:	dc 01       	movw	r26, r24
    1514:	a4 0f       	add	r26, r20
    1516:	b5 1f       	adc	r27, r21
    1518:	ab 57       	subi	r26, 0x7B	; 123
    151a:	bc 4f       	sbci	r27, 0xFC	; 252
    151c:	8c 91       	ld	r24, X
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	21 f4       	brne	.+8      	; 0x152a <DETECT_NEXT_NODE+0x640>
		{
			nextNode.X = X-1;
    1522:	ff 24       	eor	r15, r15
    1524:	fa 94       	dec	r15
    1526:	f2 0e       	add	r15, r18
			nextNode.Y = Y;
    1528:	e3 2e       	mov	r14, r19
		}
		
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status == VISITED))
    152a:	d7 e0       	ldi	r29, 0x07	; 7
    152c:	8d 16       	cp	r8, r29
    152e:	91 04       	cpc	r9, r1
    1530:	ec f4       	brge	.+58     	; 0x156c <DETECT_NEXT_NODE+0x682>
    1532:	c4 01       	movw	r24, r8
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	e4 01       	movw	r28, r8
    153a:	cc 0f       	add	r28, r28
    153c:	dd 1f       	adc	r29, r29
    153e:	cc 0f       	add	r28, r28
    1540:	dd 1f       	adc	r29, r29
    1542:	cc 0f       	add	r28, r28
    1544:	dd 1f       	adc	r29, r29
    1546:	c8 0f       	add	r28, r24
    1548:	d9 1f       	adc	r29, r25
    154a:	46 e4       	ldi	r20, 0x46	; 70
    154c:	4e 9f       	mul	r20, r30
    154e:	c0 01       	movw	r24, r0
    1550:	4f 9f       	mul	r20, r31
    1552:	90 0d       	add	r25, r0
    1554:	11 24       	eor	r1, r1
    1556:	c8 0f       	add	r28, r24
    1558:	d9 1f       	adc	r29, r25
    155a:	cb 57       	subi	r28, 0x7B	; 123
    155c:	dc 4f       	sbci	r29, 0xFC	; 252
    155e:	88 81       	ld	r24, Y
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	21 f4       	brne	.+8      	; 0x156c <DETECT_NEXT_NODE+0x682>
		{
			nextNode.X = X;
			nextNode.Y = Y+1;
    1564:	ee 24       	eor	r14, r14
    1566:	e3 94       	inc	r14
    1568:	e3 0e       	add	r14, r19
			nextNode.Y = Y;
		}
		
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status == VISITED))
		{
			nextNode.X = X;
    156a:	f2 2e       	mov	r15, r18
			nextNode.Y = Y+1;
		}
	}
	
	LCD_CLEAR();
    156c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
	else if(y==2)
	LCD_CMND(0xBF+x);
    1570:	80 ec       	ldi	r24, 0xC0	; 192
    1572:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
		}
	}
	
	LCD_CLEAR();
	LCD_SET_CURSER(2,1);
	LCD_DATA('(');
    1576:	88 e2       	ldi	r24, 0x28	; 40
    1578:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(X+0x30);
    157c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
    1580:	80 5d       	subi	r24, 0xD0	; 208
    1582:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(',');
    1586:	8c e2       	ldi	r24, 0x2C	; 44
    1588:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(Y+0x30);
    158c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
    1590:	80 5d       	subi	r24, 0xD0	; 208
    1592:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(')');
    1596:	89 e2       	ldi	r24, 0x29	; 41
    1598:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_PRINT(" --> ");
    159c:	89 ef       	ldi	r24, 0xF9	; 249
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	LCD_PRINT("(");
    15a4:	83 e4       	ldi	r24, 0x43	; 67
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	LCD_DATA(nextNode.X+0x30);
    15ac:	80 e3       	ldi	r24, 0x30	; 48
    15ae:	8f 0d       	add	r24, r15
    15b0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(',');
    15b4:	8c e2       	ldi	r24, 0x2C	; 44
    15b6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(nextNode.Y+0x30);
    15ba:	80 e3       	ldi	r24, 0x30	; 48
    15bc:	8e 0d       	add	r24, r14
    15be:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(')');
    15c2:	89 e2       	ldi	r24, 0x29	; 41
    15c4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	}
}
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
    15c8:	86 e8       	ldi	r24, 0x86	; 134
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
	LCD_DATA(nextNode.X+0x30);
	LCD_DATA(',');
	LCD_DATA(nextNode.Y+0x30);
	LCD_DATA(')');
	LCD_SET_CURSER(1,7);
	LCD_NUM(coord_count);
    15ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <coord_count>
    15d2:	0e 94 04 01 	call	0x208	; 0x208 <LCD_NUM>
	if(currentMode == BLOCK_SEARCH_MODE)
    15d6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currentMode>
    15da:	81 11       	cpse	r24, r1
    15dc:	58 c0       	rjmp	.+176    	; 0x168e <DETECT_NEXT_NODE+0x7a4>
	{
		MOVE_NEXT_NODE(X,Y,nextNode.X,nextNode.Y);
    15de:	2e 2d       	mov	r18, r14
    15e0:	4f 2d       	mov	r20, r15
    15e2:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <Y>
    15e6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
    15ea:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MOVE_NEXT_NODE>
    15ee:	4f c0       	rjmp	.+158    	; 0x168e <DETECT_NEXT_NODE+0x7a4>
		loop_count = 1;
	}
	
	if (dir_count == 0)
	{
		loop_count++;
    15f0:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <__data_end>
    15f4:	4f 5f       	subi	r20, 0xFF	; 255
    15f6:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <__data_end>
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status == VISITED))
    15fa:	4a e0       	ldi	r20, 0x0A	; 10
    15fc:	48 9d       	mul	r20, r8
    15fe:	60 01       	movw	r12, r0
    1600:	49 9d       	mul	r20, r9
    1602:	d0 0c       	add	r13, r0
    1604:	11 24       	eor	r1, r1
    1606:	0f 2e       	mov	r0, r31
    1608:	f6 e4       	ldi	r31, 0x46	; 70
    160a:	bf 2e       	mov	r11, r31
    160c:	f0 2d       	mov	r31, r0
    160e:	be 9e       	mul	r11, r30
    1610:	a0 01       	movw	r20, r0
    1612:	bf 9e       	mul	r11, r31
    1614:	50 0d       	add	r21, r0
    1616:	11 24       	eor	r1, r1
    1618:	4c 0d       	add	r20, r12
    161a:	5d 1d       	adc	r21, r13
    161c:	4b 57       	subi	r20, 0x7B	; 123
    161e:	5c 4f       	sbci	r21, 0xFC	; 252
    1620:	ea 01       	movw	r28, r20
    1622:	48 81       	ld	r20, Y
    1624:	41 30       	cpi	r20, 0x01	; 1
    1626:	09 f0       	breq	.+2      	; 0x162a <DETECT_NEXT_NODE+0x740>
    1628:	87 ce       	rjmp	.-754    	; 0x1338 <DETECT_NEXT_NODE+0x44e>
    162a:	82 ce       	rjmp	.-764    	; 0x1330 <DETECT_NEXT_NODE+0x446>
		nextNode.Y = Y+1;
		dir_count = 4;
		loop_count = 1;
	}
	
	if (dir_count == 0)
    162c:	bb 20       	and	r11, r11
    162e:	01 f3       	breq	.-64     	; 0x15f0 <DETECT_NEXT_NODE+0x706>
    1630:	0b cf       	rjmp	.-490    	; 0x1448 <DETECT_NEXT_NODE+0x55e>
	{
		loop_count++;
    1632:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <__data_end>
    1636:	4f 5f       	subi	r20, 0xFF	; 255
    1638:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <__data_end>
    163c:	7d ce       	rjmp	.-774    	; 0x1338 <DETECT_NEXT_NODE+0x44e>
		nextNode.Y = Y+1;
		dir_count = 4;
		loop_count = 1;
	}
	
	if (dir_count == 0)
    163e:	bb 20       	and	r11, r11
    1640:	c1 f3       	breq	.-16     	; 0x1632 <DETECT_NEXT_NODE+0x748>
    1642:	02 cf       	rjmp	.-508    	; 0x1448 <DETECT_NEXT_NODE+0x55e>
		nextNode.Y = Y;
		dir_count = 3;
		loop_count = 1;
	}
	
	if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].priority > nextNode.priority) && (details1[X][Y+1].status == UNVISITED))
    1644:	64 01       	movw	r12, r8
    1646:	cc 0c       	add	r12, r12
    1648:	dd 1c       	adc	r13, r13
    164a:	cc 0c       	add	r12, r12
    164c:	dd 1c       	adc	r13, r13
    164e:	cc 0c       	add	r12, r12
    1650:	dd 1c       	adc	r13, r13
    1652:	a4 01       	movw	r20, r8
    1654:	44 0f       	add	r20, r20
    1656:	55 1f       	adc	r21, r21
    1658:	4c 0d       	add	r20, r12
    165a:	5d 1d       	adc	r21, r13
    165c:	0f 2e       	mov	r0, r31
    165e:	f6 e4       	ldi	r31, 0x46	; 70
    1660:	ef 2e       	mov	r14, r31
    1662:	f0 2d       	mov	r31, r0
    1664:	ee 9e       	mul	r14, r30
    1666:	60 01       	movw	r12, r0
    1668:	ef 9e       	mul	r14, r31
    166a:	d0 0c       	add	r13, r0
    166c:	11 24       	eor	r1, r1
    166e:	4c 0d       	add	r20, r12
    1670:	5d 1d       	adc	r21, r13
    1672:	4b 57       	subi	r20, 0x7B	; 123
    1674:	5c 4f       	sbci	r21, 0xFC	; 252
    1676:	ea 01       	movw	r28, r20
    1678:	49 81       	ldd	r20, Y+1	; 0x01
    167a:	41 11       	cpse	r20, r1
    167c:	2f ce       	rjmp	.-930    	; 0x12dc <DETECT_NEXT_NODE+0x3f2>
	}
	
	if(((X-1)>=0) && (details1[X-1][Y].priority > nextNode.priority) && (details1[X-1][Y].status == UNVISITED))
	{
		nextNode.X = X-1;
		nextNode.Y = Y;
    167e:	e3 2e       	mov	r14, r19
    1680:	e3 ce       	rjmp	.-570    	; 0x1448 <DETECT_NEXT_NODE+0x55e>
			nextNode.X = X+1;
			nextNode.Y = Y;
		}
		details1[X][Y].status = BLOCK;
	}
	loop_count--;
    1682:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
    1686:	81 50       	subi	r24, 0x01	; 1
    1688:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
    168c:	6f cf       	rjmp	.-290    	; 0x156c <DETECT_NEXT_NODE+0x682>
	LCD_NUM(coord_count);
	if(currentMode == BLOCK_SEARCH_MODE)
	{
		MOVE_NEXT_NODE(X,Y,nextNode.X,nextNode.Y);
	}
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	9f 90       	pop	r9
    16a4:	8f 90       	pop	r8
    16a6:	08 95       	ret

000016a8 <DIGKSTRA>:
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
{
    16a8:	2f 92       	push	r2
    16aa:	3f 92       	push	r3
    16ac:	4f 92       	push	r4
    16ae:	5f 92       	push	r5
    16b0:	6f 92       	push	r6
    16b2:	7f 92       	push	r7
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	c5 58       	subi	r28, 0x85	; 133
    16d2:	d1 09       	sbc	r29, r1
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	34 2e       	mov	r3, r20
    16e0:	42 2e       	mov	r4, r18
    16e2:	cb 57       	subi	r28, 0x7B	; 123
    16e4:	df 4f       	sbci	r29, 0xFF	; 255
    16e6:	08 83       	st	Y, r16
    16e8:	c5 58       	subi	r28, 0x85	; 133
    16ea:	d0 40       	sbci	r29, 0x00	; 0
    16ec:	48 e7       	ldi	r20, 0x78	; 120
    16ee:	51 e0       	ldi	r21, 0x01	; 1
	unsigned char i,j;
	STRUCTURE dqued, pathQUEUE[12];
	unsigned char tempX = 0, tempY = 0;
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
    16f0:	20 e0       	ldi	r18, 0x00	; 0
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
{
    16f2:	70 e0       	ldi	r23, 0x00	; 0
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details2[i][j].distance = INFINITE;
    16f4:	34 e1       	ldi	r19, 0x14	; 20
    16f6:	11 c0       	rjmp	.+34     	; 0x171a <DIGKSTRA+0x72>
    16f8:	df 01       	movw	r26, r30
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	3c 93       	st	X, r19
			details2[i][j].visit = FALSE;
    16fe:	10 82       	st	Z, r1
    1700:	12 97       	sbiw	r26, 0x02	; 2
			details2[i][j].X = i;
    1702:	2c 93       	st	X, r18
    1704:	11 96       	adiw	r26, 0x01	; 1
			details2[i][j].Y = j;
    1706:	9c 93       	st	X, r25
	STRUCTURE dqued, pathQUEUE[12];
	unsigned char tempX = 0, tempY = 0;
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
    1708:	9f 5f       	subi	r25, 0xFF	; 255
    170a:	3a 96       	adiw	r30, 0x0a	; 10
    170c:	97 30       	cpi	r25, 0x07	; 7
    170e:	a1 f7       	brne	.-24     	; 0x16f8 <DIGKSTRA+0x50>
{
	unsigned char i,j;
	STRUCTURE dqued, pathQUEUE[12];
	unsigned char tempX = 0, tempY = 0;
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
    1710:	2f 5f       	subi	r18, 0xFF	; 255
    1712:	4a 5b       	subi	r20, 0xBA	; 186
    1714:	5f 4f       	sbci	r21, 0xFF	; 255
    1716:	25 30       	cpi	r18, 0x05	; 5
    1718:	19 f0       	breq	.+6      	; 0x1720 <DIGKSTRA+0x78>
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
{
    171a:	fa 01       	movw	r30, r20
    171c:	97 2f       	mov	r25, r23
    171e:	ec cf       	rjmp	.-40     	; 0x16f8 <DIGKSTRA+0x50>
			details2[i][j].visit = FALSE;
			details2[i][j].X = i;
			details2[i][j].Y = j;
		}
	}	
	details2[x1][y1].distance = 0;
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	fb 01       	movw	r30, r22
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	66 0f       	add	r22, r22
    172a:	77 1f       	adc	r23, r23
    172c:	66 0f       	add	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	66 0f       	add	r22, r22
    1732:	77 1f       	adc	r23, r23
    1734:	e6 0f       	add	r30, r22
    1736:	f7 1f       	adc	r31, r23
    1738:	26 e4       	ldi	r18, 0x46	; 70
    173a:	82 9f       	mul	r24, r18
    173c:	e0 0d       	add	r30, r0
    173e:	f1 1d       	adc	r31, r1
    1740:	11 24       	eor	r1, r1
    1742:	ed 58       	subi	r30, 0x8D	; 141
    1744:	fe 4f       	sbci	r31, 0xFE	; 254
    1746:	14 82       	std	Z+4, r1	; 0x04
	details2[x1][y1].visit = TRUE;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	58 2f       	mov	r21, r24
    174c:	85 83       	std	Z+5, r24	; 0x05
	Qfront=0; Qrear=0;
    174e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <Qfront>
    1752:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <Qrear>
	
	ENQUEUE(details2[x1][y1]);
    1756:	00 81       	ld	r16, Z
    1758:	11 81       	ldd	r17, Z+1	; 0x01
    175a:	22 81       	ldd	r18, Z+2	; 0x02
    175c:	33 81       	ldd	r19, Z+3	; 0x03
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	66 81       	ldd	r22, Z+6	; 0x06
    1762:	77 81       	ldd	r23, Z+7	; 0x07
    1764:	80 85       	ldd	r24, Z+8	; 0x08
    1766:	91 85       	ldd	r25, Z+9	; 0x09
    1768:	0e 94 37 03 	call	0x66e	; 0x66e <ENQUEUE>
	while(Qrear != 34)
	{
		dqued = DEQUEUE();
		tempX = dqued.X;
		tempY = dqued.Y;
		if((tempY+1 < MAX_GRID_Y) && details2[tempX][tempY+1].visit == FALSE && details2[tempX][tempY+1].status != DESTINATION)
    176c:	0f 2e       	mov	r0, r31
    176e:	f6 e4       	ldi	r31, 0x46	; 70
    1770:	df 2e       	mov	r13, r31
    1772:	f0 2d       	mov	r31, r0
			}
			else
			{
			ENQUEUE(details2[tempX][tempY+1]);
			tempDistance = details2[tempX][tempY].distance+1;
			details2[tempX][tempY+1].visit = TRUE;
    1774:	22 24       	eor	r2, r2
    1776:	23 94       	inc	r2
	details2[x1][y1].distance = 0;
	details2[x1][y1].visit = TRUE;
	Qfront=0; Qrear=0;
	
	ENQUEUE(details2[x1][y1]);
	while(Qrear != 34)
    1778:	97 c2       	rjmp	.+1326   	; 0x1ca8 <DIGKSTRA+0x600>
	{
		dqued = DEQUEUE();
    177a:	ce 01       	movw	r24, r28
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DEQUEUE>
		tempX = dqued.X;
    1782:	cb 80       	ldd	r12, Y+3	; 0x03
		tempY = dqued.Y;
    1784:	5c 80       	ldd	r5, Y+4	; 0x04
		if((tempY+1 < MAX_GRID_Y) && details2[tempX][tempY+1].visit == FALSE && details2[tempX][tempY+1].status != DESTINATION)
    1786:	e5 2c       	mov	r14, r5
    1788:	f1 2c       	mov	r15, r1
    178a:	57 01       	movw	r10, r14
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	a3 1a       	sub	r10, r19
    1790:	b3 0a       	sbc	r11, r19
    1792:	47 e0       	ldi	r20, 0x07	; 7
    1794:	a4 16       	cp	r10, r20
    1796:	b1 04       	cpc	r11, r1
    1798:	0c f0       	brlt	.+2      	; 0x179c <DIGKSTRA+0xf4>
    179a:	9d c0       	rjmp	.+314    	; 0x18d6 <DIGKSTRA+0x22e>
    179c:	c5 01       	movw	r24, r10
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	f5 01       	movw	r30, r10
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	e8 0f       	add	r30, r24
    17b2:	f9 1f       	adc	r31, r25
    17b4:	6c 2c       	mov	r6, r12
    17b6:	71 2c       	mov	r7, r1
    17b8:	dc 9c       	mul	r13, r12
    17ba:	e0 0d       	add	r30, r0
    17bc:	f1 1d       	adc	r31, r1
    17be:	11 24       	eor	r1, r1
    17c0:	ed 58       	subi	r30, 0x8D	; 141
    17c2:	fe 4f       	sbci	r31, 0xFE	; 254
    17c4:	85 81       	ldd	r24, Z+5	; 0x05
    17c6:	81 11       	cpse	r24, r1
    17c8:	86 c0       	rjmp	.+268    	; 0x18d6 <DIGKSTRA+0x22e>
    17ca:	c5 01       	movw	r24, r10
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	f5 01       	movw	r30, r10
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	e8 0f       	add	r30, r24
    17e0:	f9 1f       	adc	r31, r25
    17e2:	d6 9c       	mul	r13, r6
    17e4:	c0 01       	movw	r24, r0
    17e6:	d7 9c       	mul	r13, r7
    17e8:	90 0d       	add	r25, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	e8 0f       	add	r30, r24
    17ee:	f9 1f       	adc	r31, r25
    17f0:	ed 58       	subi	r30, 0x8D	; 141
    17f2:	fe 4f       	sbci	r31, 0xFE	; 254
    17f4:	80 81       	ld	r24, Z
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	09 f4       	brne	.+2      	; 0x17fc <DIGKSTRA+0x154>
    17fa:	6d c0       	rjmp	.+218    	; 0x18d6 <DIGKSTRA+0x22e>
		{
			if(block_caught == TRUE && details1[tempX][tempY+1].status == BLOCK)
    17fc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <block_caught>
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	c9 f4       	brne	.+50     	; 0x1836 <DIGKSTRA+0x18e>
    1804:	c5 01       	movw	r24, r10
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	f5 01       	movw	r30, r10
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	e8 0f       	add	r30, r24
    181a:	f9 1f       	adc	r31, r25
    181c:	d6 9c       	mul	r13, r6
    181e:	c0 01       	movw	r24, r0
    1820:	d7 9c       	mul	r13, r7
    1822:	90 0d       	add	r25, r0
    1824:	11 24       	eor	r1, r1
    1826:	e8 0f       	add	r30, r24
    1828:	f9 1f       	adc	r31, r25
    182a:	eb 57       	subi	r30, 0x7B	; 123
    182c:	fc 4f       	sbci	r31, 0xFC	; 252
    182e:	80 81       	ld	r24, Z
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	09 f4       	brne	.+2      	; 0x1836 <DIGKSTRA+0x18e>
    1834:	50 c0       	rjmp	.+160    	; 0x18d6 <DIGKSTRA+0x22e>
			{
				;
			}
			else
			{
			ENQUEUE(details2[tempX][tempY+1]);
    1836:	c5 01       	movw	r24, r10
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	45 01       	movw	r8, r10
    1846:	88 0c       	add	r8, r8
    1848:	99 1c       	adc	r9, r9
    184a:	88 0e       	add	r8, r24
    184c:	99 1e       	adc	r9, r25
    184e:	d6 9c       	mul	r13, r6
    1850:	c0 01       	movw	r24, r0
    1852:	d7 9c       	mul	r13, r7
    1854:	90 0d       	add	r25, r0
    1856:	11 24       	eor	r1, r1
    1858:	cd 57       	subi	r28, 0x7D	; 125
    185a:	df 4f       	sbci	r29, 0xFF	; 255
    185c:	99 83       	std	Y+1, r25	; 0x01
    185e:	88 83       	st	Y, r24
    1860:	c3 58       	subi	r28, 0x83	; 131
    1862:	d0 40       	sbci	r29, 0x00	; 0
    1864:	88 0d       	add	r24, r8
    1866:	99 1d       	adc	r25, r9
    1868:	fc 01       	movw	r30, r24
    186a:	ed 58       	subi	r30, 0x8D	; 141
    186c:	fe 4f       	sbci	r31, 0xFE	; 254
    186e:	4f 01       	movw	r8, r30
    1870:	00 81       	ld	r16, Z
    1872:	11 81       	ldd	r17, Z+1	; 0x01
    1874:	22 81       	ldd	r18, Z+2	; 0x02
    1876:	33 81       	ldd	r19, Z+3	; 0x03
    1878:	44 81       	ldd	r20, Z+4	; 0x04
    187a:	55 81       	ldd	r21, Z+5	; 0x05
    187c:	66 81       	ldd	r22, Z+6	; 0x06
    187e:	77 81       	ldd	r23, Z+7	; 0x07
    1880:	80 85       	ldd	r24, Z+8	; 0x08
    1882:	91 85       	ldd	r25, Z+9	; 0x09
    1884:	0e 94 37 03 	call	0x66e	; 0x66e <ENQUEUE>
			tempDistance = details2[tempX][tempY].distance+1;
    1888:	c7 01       	movw	r24, r14
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	f7 01       	movw	r30, r14
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	e8 0f       	add	r30, r24
    189e:	f9 1f       	adc	r31, r25
    18a0:	cd 57       	subi	r28, 0x7D	; 125
    18a2:	df 4f       	sbci	r29, 0xFF	; 255
    18a4:	28 81       	ld	r18, Y
    18a6:	39 81       	ldd	r19, Y+1	; 0x01
    18a8:	c3 58       	subi	r28, 0x83	; 131
    18aa:	d0 40       	sbci	r29, 0x00	; 0
    18ac:	e2 0f       	add	r30, r18
    18ae:	f3 1f       	adc	r31, r19
    18b0:	ed 58       	subi	r30, 0x8D	; 141
    18b2:	fe 4f       	sbci	r31, 0xFE	; 254
    18b4:	84 81       	ldd	r24, Z+4	; 0x04
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
			details2[tempX][tempY+1].visit = TRUE;
    18b8:	f4 01       	movw	r30, r8
    18ba:	25 82       	std	Z+5, r2	; 0x05
			if(tempDistance < details2[tempX][tempY+1].distance)
    18bc:	94 81       	ldd	r25, Z+4	; 0x04
    18be:	89 17       	cp	r24, r25
    18c0:	50 f4       	brcc	.+20     	; 0x18d6 <DIGKSTRA+0x22e>
			{
				details2[tempX][tempY+1].distance =  tempDistance;
    18c2:	f4 01       	movw	r30, r8
    18c4:	84 83       	std	Z+4, r24	; 0x04
				details2[tempX][tempY+1].prevX= tempX;
    18c6:	8c 2d       	mov	r24, r12
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	97 83       	std	Z+7, r25	; 0x07
    18cc:	86 83       	std	Z+6, r24	; 0x06
				details2[tempX][tempY+1].prevY= tempY;
    18ce:	85 2d       	mov	r24, r5
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	91 87       	std	Z+9, r25	; 0x09
    18d4:	80 87       	std	Z+8, r24	; 0x08
			}
			}
		}
		
		if((tempX-1 >= 0) && details2[tempX-1][tempY].visit == FALSE && details2[tempX-1][tempY].status != DESTINATION)
    18d6:	8c 2c       	mov	r8, r12
    18d8:	91 2c       	mov	r9, r1
    18da:	34 01       	movw	r6, r8
    18dc:	f1 e0       	ldi	r31, 0x01	; 1
    18de:	6f 1a       	sub	r6, r31
    18e0:	71 08       	sbc	r7, r1
    18e2:	0a f4       	brpl	.+2      	; 0x18e6 <DIGKSTRA+0x23e>
    18e4:	99 c0       	rjmp	.+306    	; 0x1a18 <DIGKSTRA+0x370>
    18e6:	c7 01       	movw	r24, r14
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	f7 01       	movw	r30, r14
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	e8 0f       	add	r30, r24
    18fc:	f9 1f       	adc	r31, r25
    18fe:	d6 9c       	mul	r13, r6
    1900:	c0 01       	movw	r24, r0
    1902:	d7 9c       	mul	r13, r7
    1904:	90 0d       	add	r25, r0
    1906:	11 24       	eor	r1, r1
    1908:	e8 0f       	add	r30, r24
    190a:	f9 1f       	adc	r31, r25
    190c:	ed 58       	subi	r30, 0x8D	; 141
    190e:	fe 4f       	sbci	r31, 0xFE	; 254
    1910:	85 81       	ldd	r24, Z+5	; 0x05
    1912:	81 11       	cpse	r24, r1
    1914:	81 c0       	rjmp	.+258    	; 0x1a18 <DIGKSTRA+0x370>
    1916:	c7 01       	movw	r24, r14
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	f7 01       	movw	r30, r14
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	e8 0f       	add	r30, r24
    192c:	f9 1f       	adc	r31, r25
    192e:	d6 9c       	mul	r13, r6
    1930:	c0 01       	movw	r24, r0
    1932:	d7 9c       	mul	r13, r7
    1934:	90 0d       	add	r25, r0
    1936:	11 24       	eor	r1, r1
    1938:	e8 0f       	add	r30, r24
    193a:	f9 1f       	adc	r31, r25
    193c:	ed 58       	subi	r30, 0x8D	; 141
    193e:	fe 4f       	sbci	r31, 0xFE	; 254
    1940:	80 81       	ld	r24, Z
    1942:	83 30       	cpi	r24, 0x03	; 3
    1944:	09 f4       	brne	.+2      	; 0x1948 <DIGKSTRA+0x2a0>
    1946:	68 c0       	rjmp	.+208    	; 0x1a18 <DIGKSTRA+0x370>
		{
			if(block_caught == TRUE && details1[tempX-1][tempY].status == BLOCK)
    1948:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <block_caught>
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	c9 f4       	brne	.+50     	; 0x1982 <DIGKSTRA+0x2da>
    1950:	c7 01       	movw	r24, r14
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	f7 01       	movw	r30, r14
    1960:	ee 0f       	add	r30, r30
    1962:	ff 1f       	adc	r31, r31
    1964:	e8 0f       	add	r30, r24
    1966:	f9 1f       	adc	r31, r25
    1968:	d6 9c       	mul	r13, r6
    196a:	c0 01       	movw	r24, r0
    196c:	d7 9c       	mul	r13, r7
    196e:	90 0d       	add	r25, r0
    1970:	11 24       	eor	r1, r1
    1972:	e8 0f       	add	r30, r24
    1974:	f9 1f       	adc	r31, r25
    1976:	eb 57       	subi	r30, 0x7B	; 123
    1978:	fc 4f       	sbci	r31, 0xFC	; 252
    197a:	80 81       	ld	r24, Z
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	09 f4       	brne	.+2      	; 0x1982 <DIGKSTRA+0x2da>
    1980:	4b c0       	rjmp	.+150    	; 0x1a18 <DIGKSTRA+0x370>
			{
				;
			}
			else
			{
			ENQUEUE(details2[tempX-1][tempY]);
    1982:	97 01       	movw	r18, r14
    1984:	22 0f       	add	r18, r18
    1986:	33 1f       	adc	r19, r19
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	22 0f       	add	r18, r18
    198e:	33 1f       	adc	r19, r19
    1990:	c7 01       	movw	r24, r14
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	ac 01       	movw	r20, r24
    1998:	42 0f       	add	r20, r18
    199a:	53 1f       	adc	r21, r19
    199c:	cd 57       	subi	r28, 0x7D	; 125
    199e:	df 4f       	sbci	r29, 0xFF	; 255
    19a0:	59 83       	std	Y+1, r21	; 0x01
    19a2:	48 83       	st	Y, r20
    19a4:	c3 58       	subi	r28, 0x83	; 131
    19a6:	d0 40       	sbci	r29, 0x00	; 0
    19a8:	d6 9c       	mul	r13, r6
    19aa:	50 01       	movw	r10, r0
    19ac:	d7 9c       	mul	r13, r7
    19ae:	b0 0c       	add	r11, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	ca 01       	movw	r24, r20
    19b4:	8a 0d       	add	r24, r10
    19b6:	9b 1d       	adc	r25, r11
    19b8:	fc 01       	movw	r30, r24
    19ba:	ed 58       	subi	r30, 0x8D	; 141
    19bc:	fe 4f       	sbci	r31, 0xFE	; 254
    19be:	5f 01       	movw	r10, r30
    19c0:	00 81       	ld	r16, Z
    19c2:	11 81       	ldd	r17, Z+1	; 0x01
    19c4:	22 81       	ldd	r18, Z+2	; 0x02
    19c6:	33 81       	ldd	r19, Z+3	; 0x03
    19c8:	44 81       	ldd	r20, Z+4	; 0x04
    19ca:	55 81       	ldd	r21, Z+5	; 0x05
    19cc:	66 81       	ldd	r22, Z+6	; 0x06
    19ce:	77 81       	ldd	r23, Z+7	; 0x07
    19d0:	80 85       	ldd	r24, Z+8	; 0x08
    19d2:	91 85       	ldd	r25, Z+9	; 0x09
    19d4:	0e 94 37 03 	call	0x66e	; 0x66e <ENQUEUE>
			tempDistance = details2[tempX][tempY].distance+1;
    19d8:	d8 9c       	mul	r13, r8
    19da:	f0 01       	movw	r30, r0
    19dc:	d9 9c       	mul	r13, r9
    19de:	f0 0d       	add	r31, r0
    19e0:	11 24       	eor	r1, r1
    19e2:	cd 57       	subi	r28, 0x7D	; 125
    19e4:	df 4f       	sbci	r29, 0xFF	; 255
    19e6:	28 81       	ld	r18, Y
    19e8:	39 81       	ldd	r19, Y+1	; 0x01
    19ea:	c3 58       	subi	r28, 0x83	; 131
    19ec:	d0 40       	sbci	r29, 0x00	; 0
    19ee:	e2 0f       	add	r30, r18
    19f0:	f3 1f       	adc	r31, r19
    19f2:	ed 58       	subi	r30, 0x8D	; 141
    19f4:	fe 4f       	sbci	r31, 0xFE	; 254
    19f6:	84 81       	ldd	r24, Z+4	; 0x04
    19f8:	8f 5f       	subi	r24, 0xFF	; 255
			details2[tempX-1][tempY].visit = TRUE;
    19fa:	f5 01       	movw	r30, r10
    19fc:	25 82       	std	Z+5, r2	; 0x05
			if(tempDistance < details2[tempX-1][tempY].distance)
    19fe:	94 81       	ldd	r25, Z+4	; 0x04
    1a00:	89 17       	cp	r24, r25
    1a02:	50 f4       	brcc	.+20     	; 0x1a18 <DIGKSTRA+0x370>
			{
				details2[tempX-1][tempY].distance =  tempDistance;
    1a04:	f5 01       	movw	r30, r10
    1a06:	84 83       	std	Z+4, r24	; 0x04
				details2[tempX-1][tempY].prevX= tempX;
    1a08:	8c 2d       	mov	r24, r12
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	97 83       	std	Z+7, r25	; 0x07
    1a0e:	86 83       	std	Z+6, r24	; 0x06
				details2[tempX-1][tempY].prevY= tempY;
    1a10:	85 2d       	mov	r24, r5
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	91 87       	std	Z+9, r25	; 0x09
    1a16:	80 87       	std	Z+8, r24	; 0x08
			}
			}
		}
	
		if((tempY-1 >= 0) && details2[tempX][tempY-1].visit == FALSE && details2[tempX][tempY-1].status != DESTINATION)
    1a18:	57 01       	movw	r10, r14
    1a1a:	f1 e0       	ldi	r31, 0x01	; 1
    1a1c:	af 1a       	sub	r10, r31
    1a1e:	b1 08       	sbc	r11, r1
    1a20:	0a f4       	brpl	.+2      	; 0x1a24 <DIGKSTRA+0x37c>
    1a22:	a0 c0       	rjmp	.+320    	; 0x1b64 <DIGKSTRA+0x4bc>
    1a24:	c5 01       	movw	r24, r10
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	f5 01       	movw	r30, r10
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	e8 0f       	add	r30, r24
    1a3a:	f9 1f       	adc	r31, r25
    1a3c:	d8 9c       	mul	r13, r8
    1a3e:	c0 01       	movw	r24, r0
    1a40:	d9 9c       	mul	r13, r9
    1a42:	90 0d       	add	r25, r0
    1a44:	11 24       	eor	r1, r1
    1a46:	e8 0f       	add	r30, r24
    1a48:	f9 1f       	adc	r31, r25
    1a4a:	ed 58       	subi	r30, 0x8D	; 141
    1a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4e:	85 81       	ldd	r24, Z+5	; 0x05
    1a50:	81 11       	cpse	r24, r1
    1a52:	88 c0       	rjmp	.+272    	; 0x1b64 <DIGKSTRA+0x4bc>
    1a54:	c5 01       	movw	r24, r10
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	f5 01       	movw	r30, r10
    1a64:	ee 0f       	add	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	d8 9c       	mul	r13, r8
    1a6e:	c0 01       	movw	r24, r0
    1a70:	d9 9c       	mul	r13, r9
    1a72:	90 0d       	add	r25, r0
    1a74:	11 24       	eor	r1, r1
    1a76:	e8 0f       	add	r30, r24
    1a78:	f9 1f       	adc	r31, r25
    1a7a:	ed 58       	subi	r30, 0x8D	; 141
    1a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7e:	80 81       	ld	r24, Z
    1a80:	83 30       	cpi	r24, 0x03	; 3
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <DIGKSTRA+0x3de>
    1a84:	6f c0       	rjmp	.+222    	; 0x1b64 <DIGKSTRA+0x4bc>
		{
			if(block_caught == TRUE  && details1[tempX][tempY-1].status == BLOCK)
    1a86:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <block_caught>
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	c9 f4       	brne	.+50     	; 0x1ac0 <DIGKSTRA+0x418>
    1a8e:	c5 01       	movw	r24, r10
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	f5 01       	movw	r30, r10
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	e8 0f       	add	r30, r24
    1aa4:	f9 1f       	adc	r31, r25
    1aa6:	d8 9c       	mul	r13, r8
    1aa8:	c0 01       	movw	r24, r0
    1aaa:	d9 9c       	mul	r13, r9
    1aac:	90 0d       	add	r25, r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	e8 0f       	add	r30, r24
    1ab2:	f9 1f       	adc	r31, r25
    1ab4:	eb 57       	subi	r30, 0x7B	; 123
    1ab6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ab8:	80 81       	ld	r24, Z
    1aba:	82 30       	cpi	r24, 0x02	; 2
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <DIGKSTRA+0x418>
    1abe:	52 c0       	rjmp	.+164    	; 0x1b64 <DIGKSTRA+0x4bc>
			{
				;
			}
			else
			{
			ENQUEUE(details2[tempX][tempY-1]);
    1ac0:	c5 01       	movw	r24, r10
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	35 01       	movw	r6, r10
    1ad0:	66 0c       	add	r6, r6
    1ad2:	77 1c       	adc	r7, r7
    1ad4:	68 0e       	add	r6, r24
    1ad6:	79 1e       	adc	r7, r25
    1ad8:	d8 9c       	mul	r13, r8
    1ada:	90 01       	movw	r18, r0
    1adc:	d9 9c       	mul	r13, r9
    1ade:	30 0d       	add	r19, r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	cd 57       	subi	r28, 0x7D	; 125
    1ae4:	df 4f       	sbci	r29, 0xFF	; 255
    1ae6:	39 83       	std	Y+1, r19	; 0x01
    1ae8:	28 83       	st	Y, r18
    1aea:	c3 58       	subi	r28, 0x83	; 131
    1aec:	d0 40       	sbci	r29, 0x00	; 0
    1aee:	c9 01       	movw	r24, r18
    1af0:	86 0d       	add	r24, r6
    1af2:	97 1d       	adc	r25, r7
    1af4:	ac 01       	movw	r20, r24
    1af6:	4d 58       	subi	r20, 0x8D	; 141
    1af8:	5e 4f       	sbci	r21, 0xFE	; 254
    1afa:	3a 01       	movw	r6, r20
    1afc:	fa 01       	movw	r30, r20
    1afe:	00 81       	ld	r16, Z
    1b00:	11 81       	ldd	r17, Z+1	; 0x01
    1b02:	22 81       	ldd	r18, Z+2	; 0x02
    1b04:	33 81       	ldd	r19, Z+3	; 0x03
    1b06:	44 81       	ldd	r20, Z+4	; 0x04
    1b08:	55 81       	ldd	r21, Z+5	; 0x05
    1b0a:	66 81       	ldd	r22, Z+6	; 0x06
    1b0c:	77 81       	ldd	r23, Z+7	; 0x07
    1b0e:	80 85       	ldd	r24, Z+8	; 0x08
    1b10:	91 85       	ldd	r25, Z+9	; 0x09
    1b12:	0e 94 37 03 	call	0x66e	; 0x66e <ENQUEUE>
			tempDistance = details2[tempX][tempY].distance+1;
    1b16:	c7 01       	movw	r24, r14
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	f7 01       	movw	r30, r14
    1b26:	ee 0f       	add	r30, r30
    1b28:	ff 1f       	adc	r31, r31
    1b2a:	e8 0f       	add	r30, r24
    1b2c:	f9 1f       	adc	r31, r25
    1b2e:	cd 57       	subi	r28, 0x7D	; 125
    1b30:	df 4f       	sbci	r29, 0xFF	; 255
    1b32:	28 81       	ld	r18, Y
    1b34:	39 81       	ldd	r19, Y+1	; 0x01
    1b36:	c3 58       	subi	r28, 0x83	; 131
    1b38:	d0 40       	sbci	r29, 0x00	; 0
    1b3a:	e2 0f       	add	r30, r18
    1b3c:	f3 1f       	adc	r31, r19
    1b3e:	ed 58       	subi	r30, 0x8D	; 141
    1b40:	fe 4f       	sbci	r31, 0xFE	; 254
    1b42:	84 81       	ldd	r24, Z+4	; 0x04
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
			details2[tempX][tempY-1].visit = TRUE;
    1b46:	f3 01       	movw	r30, r6
    1b48:	25 82       	std	Z+5, r2	; 0x05
			if(tempDistance < details2[tempX][tempY-1].distance)
    1b4a:	94 81       	ldd	r25, Z+4	; 0x04
    1b4c:	89 17       	cp	r24, r25
    1b4e:	50 f4       	brcc	.+20     	; 0x1b64 <DIGKSTRA+0x4bc>
			{
				details2[tempX][tempY-1].distance =  tempDistance;
    1b50:	f3 01       	movw	r30, r6
    1b52:	84 83       	std	Z+4, r24	; 0x04
				details2[tempX][tempY-1].prevX= tempX;
    1b54:	8c 2d       	mov	r24, r12
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	97 83       	std	Z+7, r25	; 0x07
    1b5a:	86 83       	std	Z+6, r24	; 0x06
				details2[tempX][tempY-1].prevY= tempY;
    1b5c:	85 2d       	mov	r24, r5
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	91 87       	std	Z+9, r25	; 0x09
    1b62:	80 87       	std	Z+8, r24	; 0x08
			}
			}
		}
		
		if((tempX+1 < MAX_GRID_X) && details2[tempX+1][tempY].visit == FALSE && details2[tempX+1][tempY].status != DESTINATION)
    1b64:	54 01       	movw	r10, r8
    1b66:	ff ef       	ldi	r31, 0xFF	; 255
    1b68:	af 1a       	sub	r10, r31
    1b6a:	bf 0a       	sbc	r11, r31
    1b6c:	25 e0       	ldi	r18, 0x05	; 5
    1b6e:	a2 16       	cp	r10, r18
    1b70:	b1 04       	cpc	r11, r1
    1b72:	0c f0       	brlt	.+2      	; 0x1b76 <DIGKSTRA+0x4ce>
    1b74:	99 c0       	rjmp	.+306    	; 0x1ca8 <DIGKSTRA+0x600>
    1b76:	c7 01       	movw	r24, r14
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	f7 01       	movw	r30, r14
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	e8 0f       	add	r30, r24
    1b8c:	f9 1f       	adc	r31, r25
    1b8e:	da 9c       	mul	r13, r10
    1b90:	c0 01       	movw	r24, r0
    1b92:	db 9c       	mul	r13, r11
    1b94:	90 0d       	add	r25, r0
    1b96:	11 24       	eor	r1, r1
    1b98:	e8 0f       	add	r30, r24
    1b9a:	f9 1f       	adc	r31, r25
    1b9c:	ed 58       	subi	r30, 0x8D	; 141
    1b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba0:	85 81       	ldd	r24, Z+5	; 0x05
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	81 c0       	rjmp	.+258    	; 0x1ca8 <DIGKSTRA+0x600>
    1ba6:	c7 01       	movw	r24, r14
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	f7 01       	movw	r30, r14
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	e8 0f       	add	r30, r24
    1bbc:	f9 1f       	adc	r31, r25
    1bbe:	da 9c       	mul	r13, r10
    1bc0:	c0 01       	movw	r24, r0
    1bc2:	db 9c       	mul	r13, r11
    1bc4:	90 0d       	add	r25, r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	e8 0f       	add	r30, r24
    1bca:	f9 1f       	adc	r31, r25
    1bcc:	ed 58       	subi	r30, 0x8D	; 141
    1bce:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd0:	80 81       	ld	r24, Z
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <DIGKSTRA+0x530>
    1bd6:	68 c0       	rjmp	.+208    	; 0x1ca8 <DIGKSTRA+0x600>
		{
			if(block_caught == TRUE  && details1[tempX+1][tempY].status == BLOCK)
    1bd8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <block_caught>
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	c9 f4       	brne	.+50     	; 0x1c12 <DIGKSTRA+0x56a>
    1be0:	c7 01       	movw	r24, r14
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	f7 01       	movw	r30, r14
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	e8 0f       	add	r30, r24
    1bf6:	f9 1f       	adc	r31, r25
    1bf8:	da 9c       	mul	r13, r10
    1bfa:	c0 01       	movw	r24, r0
    1bfc:	db 9c       	mul	r13, r11
    1bfe:	90 0d       	add	r25, r0
    1c00:	11 24       	eor	r1, r1
    1c02:	e8 0f       	add	r30, r24
    1c04:	f9 1f       	adc	r31, r25
    1c06:	eb 57       	subi	r30, 0x7B	; 123
    1c08:	fc 4f       	sbci	r31, 0xFC	; 252
    1c0a:	80 81       	ld	r24, Z
    1c0c:	82 30       	cpi	r24, 0x02	; 2
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <DIGKSTRA+0x56a>
    1c10:	4b c0       	rjmp	.+150    	; 0x1ca8 <DIGKSTRA+0x600>
			{
				;
			}
			else
			{
			ENQUEUE(details2[tempX+1][tempY]);
    1c12:	97 01       	movw	r18, r14
    1c14:	22 0f       	add	r18, r18
    1c16:	33 1f       	adc	r19, r19
    1c18:	22 0f       	add	r18, r18
    1c1a:	33 1f       	adc	r19, r19
    1c1c:	22 0f       	add	r18, r18
    1c1e:	33 1f       	adc	r19, r19
    1c20:	c7 01       	movw	r24, r14
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	ac 01       	movw	r20, r24
    1c28:	42 0f       	add	r20, r18
    1c2a:	53 1f       	adc	r21, r19
    1c2c:	cd 57       	subi	r28, 0x7D	; 125
    1c2e:	df 4f       	sbci	r29, 0xFF	; 255
    1c30:	59 83       	std	Y+1, r21	; 0x01
    1c32:	48 83       	st	Y, r20
    1c34:	c3 58       	subi	r28, 0x83	; 131
    1c36:	d0 40       	sbci	r29, 0x00	; 0
    1c38:	da 9c       	mul	r13, r10
    1c3a:	30 01       	movw	r6, r0
    1c3c:	db 9c       	mul	r13, r11
    1c3e:	70 0c       	add	r7, r0
    1c40:	11 24       	eor	r1, r1
    1c42:	ca 01       	movw	r24, r20
    1c44:	86 0d       	add	r24, r6
    1c46:	97 1d       	adc	r25, r7
    1c48:	fc 01       	movw	r30, r24
    1c4a:	ed 58       	subi	r30, 0x8D	; 141
    1c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4e:	3f 01       	movw	r6, r30
    1c50:	00 81       	ld	r16, Z
    1c52:	11 81       	ldd	r17, Z+1	; 0x01
    1c54:	22 81       	ldd	r18, Z+2	; 0x02
    1c56:	33 81       	ldd	r19, Z+3	; 0x03
    1c58:	44 81       	ldd	r20, Z+4	; 0x04
    1c5a:	55 81       	ldd	r21, Z+5	; 0x05
    1c5c:	66 81       	ldd	r22, Z+6	; 0x06
    1c5e:	77 81       	ldd	r23, Z+7	; 0x07
    1c60:	80 85       	ldd	r24, Z+8	; 0x08
    1c62:	91 85       	ldd	r25, Z+9	; 0x09
    1c64:	0e 94 37 03 	call	0x66e	; 0x66e <ENQUEUE>
			tempDistance = details2[tempX][tempY].distance+1;
    1c68:	d8 9c       	mul	r13, r8
    1c6a:	f0 01       	movw	r30, r0
    1c6c:	d9 9c       	mul	r13, r9
    1c6e:	f0 0d       	add	r31, r0
    1c70:	11 24       	eor	r1, r1
    1c72:	cd 57       	subi	r28, 0x7D	; 125
    1c74:	df 4f       	sbci	r29, 0xFF	; 255
    1c76:	28 81       	ld	r18, Y
    1c78:	39 81       	ldd	r19, Y+1	; 0x01
    1c7a:	c3 58       	subi	r28, 0x83	; 131
    1c7c:	d0 40       	sbci	r29, 0x00	; 0
    1c7e:	e2 0f       	add	r30, r18
    1c80:	f3 1f       	adc	r31, r19
    1c82:	ed 58       	subi	r30, 0x8D	; 141
    1c84:	fe 4f       	sbci	r31, 0xFE	; 254
    1c86:	84 81       	ldd	r24, Z+4	; 0x04
    1c88:	8f 5f       	subi	r24, 0xFF	; 255
			details2[tempX+1][tempY].visit = TRUE;
    1c8a:	f3 01       	movw	r30, r6
    1c8c:	25 82       	std	Z+5, r2	; 0x05
			if(tempDistance < details2[tempX+1][tempY].distance)
    1c8e:	94 81       	ldd	r25, Z+4	; 0x04
    1c90:	89 17       	cp	r24, r25
    1c92:	50 f4       	brcc	.+20     	; 0x1ca8 <DIGKSTRA+0x600>
			{
				details2[tempX+1][tempY].distance =  tempDistance;
    1c94:	f3 01       	movw	r30, r6
    1c96:	84 83       	std	Z+4, r24	; 0x04
				details2[tempX+1][tempY].prevX= tempX;
    1c98:	8c 2d       	mov	r24, r12
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	97 83       	std	Z+7, r25	; 0x07
    1c9e:	86 83       	std	Z+6, r24	; 0x06
				details2[tempX+1][tempY].prevY= tempY;
    1ca0:	85 2d       	mov	r24, r5
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	91 87       	std	Z+9, r25	; 0x09
    1ca6:	80 87       	std	Z+8, r24	; 0x08
	details2[x1][y1].distance = 0;
	details2[x1][y1].visit = TRUE;
	Qfront=0; Qrear=0;
	
	ENQUEUE(details2[x1][y1]);
	while(Qrear != 34)
    1ca8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Qrear>
    1cac:	82 32       	cpi	r24, 0x22	; 34
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <DIGKSTRA+0x60a>
    1cb0:	64 cd       	rjmp	.-1336   	; 0x177a <DIGKSTRA+0xd2>
			}
			}
		}
	}

	pathQUEUE[0].X = x2;
    1cb2:	3d 86       	std	Y+13, r3	; 0x0d
	pathQUEUE[0].Y = y2;
    1cb4:	4e 86       	std	Y+14, r4	; 0x0e
	tempX = pathQUEUE[0].X;
	tempY = pathQUEUE[0].Y;
	j = details2[x2][y2].distance;
    1cb6:	84 2d       	mov	r24, r4
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	fc 01       	movw	r30, r24
    1cbc:	ee 0f       	add	r30, r30
    1cbe:	ff 1f       	adc	r31, r31
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	e8 0f       	add	r30, r24
    1cce:	f9 1f       	adc	r31, r25
    1cd0:	26 e4       	ldi	r18, 0x46	; 70
    1cd2:	32 9e       	mul	r3, r18
    1cd4:	e0 0d       	add	r30, r0
    1cd6:	f1 1d       	adc	r31, r1
    1cd8:	11 24       	eor	r1, r1
    1cda:	ed 58       	subi	r30, 0x8D	; 141
    1cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cde:	f4 80       	ldd	r15, Z+4	; 0x04
	
	if(j>0 && j<INFINITE)
    1ce0:	8f ef       	ldi	r24, 0xFF	; 255
    1ce2:	8f 0d       	add	r24, r15
    1ce4:	83 31       	cpi	r24, 0x13	; 19
    1ce6:	08 f0       	brcs	.+2      	; 0x1cea <DIGKSTRA+0x642>
    1ce8:	9d c0       	rjmp	.+314    	; 0x1e24 <DIGKSTRA+0x77c>
	{
		for(i=1;i<=j;i++)
    1cea:	ff 20       	and	r15, r15
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <DIGKSTRA+0x648>
    1cee:	9c c0       	rjmp	.+312    	; 0x1e28 <DIGKSTRA+0x780>
    1cf0:	de 01       	movw	r26, r28
    1cf2:	58 96       	adiw	r26, 0x18	; 24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c 01       	movw	r18, r24
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	82 0f       	add	r24, r18
    1d0a:	93 1f       	adc	r25, r19
    1d0c:	8c 0f       	add	r24, r28
    1d0e:	9d 1f       	adc	r25, r29
    1d10:	82 96       	adiw	r24, 0x22	; 34
		{
			pathQUEUE[i].X = details2[tempX][tempY].prevX;
    1d12:	46 e4       	ldi	r20, 0x46	; 70
    1d14:	51 2c       	mov	r5, r1
    1d16:	f2 01       	movw	r30, r4
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	44 0c       	add	r4, r4
    1d1e:	55 1c       	adc	r5, r5
    1d20:	44 0c       	add	r4, r4
    1d22:	55 1c       	adc	r5, r5
    1d24:	44 0c       	add	r4, r4
    1d26:	55 1c       	adc	r5, r5
    1d28:	e4 0d       	add	r30, r4
    1d2a:	f5 1d       	adc	r31, r5
    1d2c:	43 9d       	mul	r20, r3
    1d2e:	e0 0d       	add	r30, r0
    1d30:	f1 1d       	adc	r31, r1
    1d32:	11 24       	eor	r1, r1
    1d34:	bf 01       	movw	r22, r30
    1d36:	6d 58       	subi	r22, 0x8D	; 141
    1d38:	7e 4f       	sbci	r23, 0xFE	; 254
    1d3a:	fb 01       	movw	r30, r22
    1d3c:	36 80       	ldd	r3, Z+6	; 0x06
    1d3e:	9d 01       	movw	r18, r26
    1d40:	21 50       	subi	r18, 0x01	; 1
    1d42:	31 09       	sbc	r19, r1
    1d44:	f9 01       	movw	r30, r18
    1d46:	30 82       	st	Z, r3
			pathQUEUE[i].Y = details2[tempX][tempY].prevY;
    1d48:	fb 01       	movw	r30, r22
    1d4a:	40 84       	ldd	r4, Z+8	; 0x08
    1d4c:	4c 92       	st	X, r4
    1d4e:	1a 96       	adiw	r26, 0x0a	; 10
	tempY = pathQUEUE[0].Y;
	j = details2[x2][y2].distance;
	
	if(j>0 && j<INFINITE)
	{
		for(i=1;i<=j;i++)
    1d50:	a8 17       	cp	r26, r24
    1d52:	b9 07       	cpc	r27, r25
    1d54:	f9 f6       	brne	.-66     	; 0x1d14 <DIGKSTRA+0x66c>
    1d56:	6a c0       	rjmp	.+212    	; 0x1e2c <DIGKSTRA+0x784>
			pathQUEUE[i].Y = details2[tempX][tempY].prevY;
			tempX = pathQUEUE[i].X;
			tempY = pathQUEUE[i].Y;
		}
		
		if(MOVE==TRUE)
    1d58:	ef 2c       	mov	r14, r15
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
	else if(y==2)
	LCD_CMND(0xBF+x);
    1d5a:	80 ec       	ldi	r24, 0xC0	; 192
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
		{
			for(i=j;i>0;i--)
			{
				//LCD_CLEAR();
				LCD_SET_CURSER(2,1);
				LCD_DATA('(');
    1d60:	88 e2       	ldi	r24, 0x28	; 40
    1d62:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i].X + 0x30);
    1d66:	ce 2c       	mov	r12, r14
    1d68:	d1 2c       	mov	r13, r1
    1d6a:	56 01       	movw	r10, r12
    1d6c:	aa 0c       	add	r10, r10
    1d6e:	bb 1c       	adc	r11, r11
    1d70:	c6 01       	movw	r24, r12
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	a8 0e       	add	r10, r24
    1d80:	b9 1e       	adc	r11, r25
    1d82:	21 e0       	ldi	r18, 0x01	; 1
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	2c 0f       	add	r18, r28
    1d88:	3d 1f       	adc	r19, r29
    1d8a:	a2 0e       	add	r10, r18
    1d8c:	b3 1e       	adc	r11, r19
    1d8e:	f5 01       	movw	r30, r10
    1d90:	14 85       	ldd	r17, Z+12	; 0x0c
    1d92:	80 e3       	ldi	r24, 0x30	; 48
    1d94:	81 0f       	add	r24, r17
    1d96:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(',');
    1d9a:	8c e2       	ldi	r24, 0x2C	; 44
    1d9c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i].Y + 0x30);
    1da0:	f5 01       	movw	r30, r10
    1da2:	05 85       	ldd	r16, Z+13	; 0x0d
    1da4:	80 e3       	ldi	r24, 0x30	; 48
    1da6:	80 0f       	add	r24, r16
    1da8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(')');
    1dac:	89 e2       	ldi	r24, 0x29	; 41
    1dae:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_PRINT(" --> ");
    1db2:	89 ef       	ldi	r24, 0xF9	; 249
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
				LCD_PRINT("(");
    1dba:	83 e4       	ldi	r24, 0x43	; 67
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
				LCD_DATA(pathQUEUE[i-1].X + 0x30);
    1dc2:	f1 e0       	ldi	r31, 0x01	; 1
    1dc4:	cf 1a       	sub	r12, r31
    1dc6:	d1 08       	sbc	r13, r1
    1dc8:	c6 01       	movw	r24, r12
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	cc 0c       	add	r12, r12
    1dd0:	dd 1c       	adc	r13, r13
    1dd2:	cc 0c       	add	r12, r12
    1dd4:	dd 1c       	adc	r13, r13
    1dd6:	cc 0c       	add	r12, r12
    1dd8:	dd 1c       	adc	r13, r13
    1dda:	c8 0e       	add	r12, r24
    1ddc:	d9 1e       	adc	r13, r25
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	2c 0f       	add	r18, r28
    1de4:	3d 1f       	adc	r19, r29
    1de6:	c2 0e       	add	r12, r18
    1de8:	d3 1e       	adc	r13, r19
    1dea:	f6 01       	movw	r30, r12
    1dec:	b4 84       	ldd	r11, Z+12	; 0x0c
    1dee:	80 e3       	ldi	r24, 0x30	; 48
    1df0:	8b 0d       	add	r24, r11
    1df2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(',');
    1df6:	8c e2       	ldi	r24, 0x2C	; 44
    1df8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i-1].Y + 0x30);
    1dfc:	f6 01       	movw	r30, r12
    1dfe:	d5 84       	ldd	r13, Z+13	; 0x0d
    1e00:	80 e3       	ldi	r24, 0x30	; 48
    1e02:	8d 0d       	add	r24, r13
    1e04:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(')');				
    1e08:	89 e2       	ldi	r24, 0x29	; 41
    1e0a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				MOVE_NEXT_NODE(pathQUEUE[i].X,pathQUEUE[i].Y,pathQUEUE[i-1].X,pathQUEUE[i-1].Y);
    1e0e:	2d 2d       	mov	r18, r13
    1e10:	4b 2d       	mov	r20, r11
    1e12:	60 2f       	mov	r22, r16
    1e14:	81 2f       	mov	r24, r17
    1e16:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MOVE_NEXT_NODE>
			tempY = pathQUEUE[i].Y;
		}
		
		if(MOVE==TRUE)
		{
			for(i=j;i>0;i--)
    1e1a:	ea 94       	dec	r14
    1e1c:	e1 10       	cpse	r14, r1
    1e1e:	9d cf       	rjmp	.-198    	; 0x1d5a <DIGKSTRA+0x6b2>
				LCD_DATA(pathQUEUE[i-1].Y + 0x30);
				LCD_DATA(')');				
				MOVE_NEXT_NODE(pathQUEUE[i].X,pathQUEUE[i].Y,pathQUEUE[i-1].X,pathQUEUE[i-1].Y);
			}
		}
		return j;	
    1e20:	8f 2d       	mov	r24, r15
    1e22:	0d c0       	rjmp	.+26     	; 0x1e3e <DIGKSTRA+0x796>
	}
	return INFINITE;
    1e24:	84 e1       	ldi	r24, 0x14	; 20
    1e26:	0b c0       	rjmp	.+22     	; 0x1e3e <DIGKSTRA+0x796>
				LCD_DATA(pathQUEUE[i-1].Y + 0x30);
				LCD_DATA(')');				
				MOVE_NEXT_NODE(pathQUEUE[i].X,pathQUEUE[i].Y,pathQUEUE[i-1].X,pathQUEUE[i-1].Y);
			}
		}
		return j;	
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <DIGKSTRA+0x796>
			pathQUEUE[i].Y = details2[tempX][tempY].prevY;
			tempX = pathQUEUE[i].X;
			tempY = pathQUEUE[i].Y;
		}
		
		if(MOVE==TRUE)
    1e2c:	cb 57       	subi	r28, 0x7B	; 123
    1e2e:	df 4f       	sbci	r29, 0xFF	; 255
    1e30:	f8 81       	ld	r31, Y
    1e32:	c5 58       	subi	r28, 0x85	; 133
    1e34:	d0 40       	sbci	r29, 0x00	; 0
    1e36:	f1 30       	cpi	r31, 0x01	; 1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <DIGKSTRA+0x794>
    1e3a:	8e cf       	rjmp	.-228    	; 0x1d58 <DIGKSTRA+0x6b0>
				LCD_DATA(pathQUEUE[i-1].Y + 0x30);
				LCD_DATA(')');				
				MOVE_NEXT_NODE(pathQUEUE[i].X,pathQUEUE[i].Y,pathQUEUE[i-1].X,pathQUEUE[i-1].Y);
			}
		}
		return j;	
    1e3c:	8f 2d       	mov	r24, r15
	}
	return INFINITE;
}
    1e3e:	cb 57       	subi	r28, 0x7B	; 123
    1e40:	df 4f       	sbci	r29, 0xFF	; 255
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	df 90       	pop	r13
    1e5a:	cf 90       	pop	r12
    1e5c:	bf 90       	pop	r11
    1e5e:	af 90       	pop	r10
    1e60:	9f 90       	pop	r9
    1e62:	8f 90       	pop	r8
    1e64:	7f 90       	pop	r7
    1e66:	6f 90       	pop	r6
    1e68:	5f 90       	pop	r5
    1e6a:	4f 90       	pop	r4
    1e6c:	3f 90       	pop	r3
    1e6e:	2f 90       	pop	r2
    1e70:	08 95       	ret

00001e72 <MOVE_TO_NEAREST_BLOCK>:
		destinationCounter--;
	}
}

void MOVE_TO_NEAREST_BLOCK()
{
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
	unsigned char i, j=0;
	unsigned char distance,tempd;
	block_caught = FALSE;
    1e7a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <block_caught>
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
    1e7e:	e5 e5       	ldi	r30, 0x55	; 85
    1e80:	f1 e0       	ldi	r31, 0x01	; 1
    1e82:	00 e0       	ldi	r16, 0x00	; 0
    1e84:	23 81       	ldd	r18, Z+3	; 0x03
    1e86:	42 81       	ldd	r20, Z+2	; 0x02
    1e88:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <Y>
    1e8c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
    1e90:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <DIGKSTRA>
    1e94:	d8 2f       	mov	r29, r24
	for(i=1;i<blockCounter;i++)
    1e96:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <blockCounter>
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	20 f1       	brcs	.+72     	; 0x1ee6 <MOVE_TO_NEAREST_BLOCK+0x74>
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
    1ea0:	c1 e0       	ldi	r28, 0x01	; 1
	{
		tempd = DIGKSTRA(X,Y,block[i].X,block[i].Y,FALSE);
    1ea2:	2c 2f       	mov	r18, r28
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	f9 01       	movw	r30, r18
    1ea8:	ee 0f       	add	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	22 0f       	add	r18, r18
    1eae:	33 1f       	adc	r19, r19
    1eb0:	22 0f       	add	r18, r18
    1eb2:	33 1f       	adc	r19, r19
    1eb4:	22 0f       	add	r18, r18
    1eb6:	33 1f       	adc	r19, r19
    1eb8:	e2 0f       	add	r30, r18
    1eba:	f3 1f       	adc	r31, r19
    1ebc:	eb 5a       	subi	r30, 0xAB	; 171
    1ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec0:	00 e0       	ldi	r16, 0x00	; 0
    1ec2:	23 81       	ldd	r18, Z+3	; 0x03
    1ec4:	42 81       	ldd	r20, Z+2	; 0x02
    1ec6:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <Y>
    1eca:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
    1ece:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <DIGKSTRA>
		if(tempd < distance)
    1ed2:	8d 17       	cp	r24, r29
    1ed4:	10 f4       	brcc	.+4      	; 0x1eda <MOVE_TO_NEAREST_BLOCK+0x68>
		{
			distance = tempd;
    1ed6:	d8 2f       	mov	r29, r24
	block_caught = FALSE;
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
	for(i=1;i<blockCounter;i++)
	{
		tempd = DIGKSTRA(X,Y,block[i].X,block[i].Y,FALSE);
		if(tempd < distance)
    1ed8:	1c 2f       	mov	r17, r28
{
	unsigned char i, j=0;
	unsigned char distance,tempd;
	block_caught = FALSE;
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
	for(i=1;i<blockCounter;i++)
    1eda:	cf 5f       	subi	r28, 0xFF	; 255
    1edc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <blockCounter>
    1ee0:	c9 17       	cp	r28, r25
    1ee2:	f8 f2       	brcs	.-66     	; 0x1ea2 <MOVE_TO_NEAREST_BLOCK+0x30>
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <MOVE_TO_NEAREST_BLOCK+0x76>
	}
}

void MOVE_TO_NEAREST_BLOCK()
{
	unsigned char i, j=0;
    1ee6:	10 e0       	ldi	r17, 0x00	; 0
		{
			distance = tempd;
			j=i;
		}
	}	
	LCD_CLEAR();
    1ee8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
	LCD_PRINT("Aproach to block");
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	BOT_MOVE(FORWARD);
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
    1efa:	2f ef       	ldi	r18, 0xFF	; 255
    1efc:	81 ee       	ldi	r24, 0xE1	; 225
    1efe:	94 e0       	ldi	r25, 0x04	; 4
    1f00:	21 50       	subi	r18, 0x01	; 1
    1f02:	80 40       	sbci	r24, 0x00	; 0
    1f04:	90 40       	sbci	r25, 0x00	; 0
    1f06:	e1 f7       	brne	.-8      	; 0x1f00 <MOVE_TO_NEAREST_BLOCK+0x8e>
    1f08:	00 c0       	rjmp	.+0      	; 0x1f0a <MOVE_TO_NEAREST_BLOCK+0x98>
    1f0a:	00 00       	nop
	_delay_ms(100);
	BOT_STOP();
    1f0c:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	DIGKSTRA(X,Y,block[j].X,block[j].Y,TRUE);
    1f10:	81 2f       	mov	r24, r17
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	fc 01       	movw	r30, r24
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	e8 0f       	add	r30, r24
    1f28:	f9 1f       	adc	r31, r25
    1f2a:	eb 5a       	subi	r30, 0xAB	; 171
    1f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2e:	01 e0       	ldi	r16, 0x01	; 1
    1f30:	23 81       	ldd	r18, Z+3	; 0x03
    1f32:	42 81       	ldd	r20, Z+2	; 0x02
    1f34:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <Y>
    1f38:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
    1f3c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <DIGKSTRA>
	block_no_1 = j;
    1f40:	10 93 50 01 	sts	0x0150, r17	; 0x800150 <block_no_1>
	REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(j,BLOCK);
    1f44:	62 e0       	ldi	r22, 0x02	; 2
    1f46:	81 2f       	mov	r24, r17
    1f48:	0e 94 8f 03 	call	0x71e	; 0x71e <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY>
	BLOCK_HOLD(FORWARD); //grip the block
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <BLOCK_HOLD>
	}
}
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
    1f52:	80 e8       	ldi	r24, 0x80	; 128
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
	DIGKSTRA(X,Y,block[j].X,block[j].Y,TRUE);
	block_no_1 = j;
	REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(j,BLOCK);
	BLOCK_HOLD(FORWARD); //grip the block
	LCD_SET_CURSER(1,1);
	LCD_PRINT("    Gripping    ");
    1f58:	80 e1       	ldi	r24, 0x10	; 16
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
    1f60:	2f ef       	ldi	r18, 0xFF	; 255
    1f62:	87 ea       	ldi	r24, 0xA7	; 167
    1f64:	91 e6       	ldi	r25, 0x61	; 97
    1f66:	21 50       	subi	r18, 0x01	; 1
    1f68:	80 40       	sbci	r24, 0x00	; 0
    1f6a:	90 40       	sbci	r25, 0x00	; 0
    1f6c:	e1 f7       	brne	.-8      	; 0x1f66 <MOVE_TO_NEAREST_BLOCK+0xf4>
    1f6e:	00 c0       	rjmp	.+0      	; 0x1f70 <MOVE_TO_NEAREST_BLOCK+0xfe>
    1f70:	00 00       	nop
	_delay_ms(BLOCK_GRIP_DELAY);
	BLOCK_LIFT(FORWARD);  //lift the block
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	0e 94 d6 01 	call	0x3ac	; 0x3ac <BLOCK_LIFT>
    1f78:	2f ef       	ldi	r18, 0xFF	; 255
    1f7a:	83 ed       	ldi	r24, 0xD3	; 211
    1f7c:	90 e3       	ldi	r25, 0x30	; 48
    1f7e:	21 50       	subi	r18, 0x01	; 1
    1f80:	80 40       	sbci	r24, 0x00	; 0
    1f82:	90 40       	sbci	r25, 0x00	; 0
    1f84:	e1 f7       	brne	.-8      	; 0x1f7e <MOVE_TO_NEAREST_BLOCK+0x10c>
    1f86:	00 c0       	rjmp	.+0      	; 0x1f88 <MOVE_TO_NEAREST_BLOCK+0x116>
    1f88:	00 00       	nop
	_delay_ms(BLOCK_LIFT_DELAY);
	block_caught = TRUE;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <block_caught>
	FOLLOW_ONE_NODE(FORWARD);
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	0e 94 c8 06 	call	0xd90	; 0xd90 <FOLLOW_ONE_NODE>
	if(dir == 'N')
    1f96:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
    1f9a:	8e 34       	cpi	r24, 0x4E	; 78
    1f9c:	31 f4       	brne	.+12     	; 0x1faa <MOVE_TO_NEAREST_BLOCK+0x138>
		Y--;
    1f9e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
    1fa2:	81 50       	subi	r24, 0x01	; 1
    1fa4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Y>
    1fa8:	17 c0       	rjmp	.+46     	; 0x1fd8 <MOVE_TO_NEAREST_BLOCK+0x166>
	else if(dir=='E')
    1faa:	85 34       	cpi	r24, 0x45	; 69
    1fac:	31 f4       	brne	.+12     	; 0x1fba <MOVE_TO_NEAREST_BLOCK+0x148>
		X++;
    1fae:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
    1fb2:	8f 5f       	subi	r24, 0xFF	; 255
    1fb4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <X>
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <MOVE_TO_NEAREST_BLOCK+0x166>
	else if(dir=='W')
    1fba:	87 35       	cpi	r24, 0x57	; 87
    1fbc:	31 f4       	brne	.+12     	; 0x1fca <MOVE_TO_NEAREST_BLOCK+0x158>
		X--;
    1fbe:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
    1fc2:	81 50       	subi	r24, 0x01	; 1
    1fc4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <X>
    1fc8:	07 c0       	rjmp	.+14     	; 0x1fd8 <MOVE_TO_NEAREST_BLOCK+0x166>
	else if(dir=='S')
    1fca:	83 35       	cpi	r24, 0x53	; 83
    1fcc:	29 f4       	brne	.+10     	; 0x1fd8 <MOVE_TO_NEAREST_BLOCK+0x166>
		Y++;
    1fce:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
    1fd2:	8f 5f       	subi	r24, 0xFF	; 255
    1fd4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Y>
}
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	08 95       	ret

00001fe2 <MOVE_TO_NEAREST_DESTINATION>:

void MOVE_TO_NEAREST_DESTINATION()
{
    1fe2:	0f 93       	push	r16
	}
}
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
    1fe4:	80 e8       	ldi	r24, 0x80	; 128
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
}

void MOVE_TO_NEAREST_DESTINATION()
{
	LCD_SET_CURSER(1,1);
	LCD_PRINT("   Arranging   ");
    1fea:	81 e2       	ldi	r24, 0x21	; 33
    1fec:	91 e0       	ldi	r25, 0x01	; 1
    1fee:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	dest_coun = block_no_1;
    1ff2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <block_no_1>
    1ff6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <dest_coun>
	DIGKSTRA(X,Y,destination[dest_coun].X,destination[dest_coun].Y,TRUE);
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	e8 0f       	add	r30, r24
    2010:	f9 1f       	adc	r31, r25
    2012:	ef 52       	subi	r30, 0x2F	; 47
    2014:	fd 4f       	sbci	r31, 0xFD	; 253
    2016:	01 e0       	ldi	r16, 0x01	; 1
    2018:	23 81       	ldd	r18, Z+3	; 0x03
    201a:	42 81       	ldd	r20, Z+2	; 0x02
    201c:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <Y>
    2020:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
    2024:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <DIGKSTRA>
	details2[destination[dest_coun].X][destination[dest_coun].Y].status = DESTINATION;
    2028:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <dest_coun>
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	f9 01       	movw	r30, r18
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	22 0f       	add	r18, r18
    2038:	33 1f       	adc	r19, r19
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	22 0f       	add	r18, r18
    2040:	33 1f       	adc	r19, r19
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	ef 52       	subi	r30, 0x2F	; 47
    2048:	fd 4f       	sbci	r31, 0xFD	; 253
    204a:	23 81       	ldd	r18, Z+3	; 0x03
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	92 81       	ldd	r25, Z+2	; 0x02
    2050:	f9 01       	movw	r30, r18
    2052:	ee 0f       	add	r30, r30
    2054:	ff 1f       	adc	r31, r31
    2056:	22 0f       	add	r18, r18
    2058:	33 1f       	adc	r19, r19
    205a:	22 0f       	add	r18, r18
    205c:	33 1f       	adc	r19, r19
    205e:	22 0f       	add	r18, r18
    2060:	33 1f       	adc	r19, r19
    2062:	e2 0f       	add	r30, r18
    2064:	f3 1f       	adc	r31, r19
    2066:	26 e4       	ldi	r18, 0x46	; 70
    2068:	92 9f       	mul	r25, r18
    206a:	e0 0d       	add	r30, r0
    206c:	f1 1d       	adc	r31, r1
    206e:	11 24       	eor	r1, r1
    2070:	ed 58       	subi	r30, 0x8D	; 141
    2072:	fe 4f       	sbci	r31, 0xFE	; 254
    2074:	93 e0       	ldi	r25, 0x03	; 3
    2076:	90 83       	st	Z, r25
	REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(dest_coun,DESTINATION);
    2078:	63 e0       	ldi	r22, 0x03	; 3
    207a:	0e 94 8f 03 	call	0x71e	; 0x71e <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY>
	BOT_STOP();
    207e:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	BOT_MOVE(BACKWARD); //move little back to place block
    2082:	83 e0       	ldi	r24, 0x03	; 3
    2084:	0e 94 95 01 	call	0x32a	; 0x32a <BOT_MOVE>
    2088:	8f ef       	ldi	r24, 0xFF	; 255
    208a:	93 ec       	ldi	r25, 0xC3	; 195
    208c:	29 e0       	ldi	r18, 0x09	; 9
    208e:	81 50       	subi	r24, 0x01	; 1
    2090:	90 40       	sbci	r25, 0x00	; 0
    2092:	20 40       	sbci	r18, 0x00	; 0
    2094:	e1 f7       	brne	.-8      	; 0x208e <MOVE_TO_NEAREST_DESTINATION+0xac>
    2096:	00 c0       	rjmp	.+0      	; 0x2098 <MOVE_TO_NEAREST_DESTINATION+0xb6>
    2098:	00 00       	nop
	_delay_ms(200);
	LCD_CLEAR();
    209a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
	LCD_PRINT("   Placing @");
    209e:	81 e3       	ldi	r24, 0x31	; 49
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
	LCD_CMND(0x7F+x);
	else if(y==2)
	LCD_CMND(0xBF+x);
    20a6:	80 ec       	ldi	r24, 0xC0	; 192
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
	BOT_MOVE(BACKWARD); //move little back to place block
	_delay_ms(200);
	LCD_CLEAR();
	LCD_PRINT("   Placing @");
	LCD_SET_CURSER(2,1);
	LCD_PRINT("     (");
    20ac:	8e e3       	ldi	r24, 0x3E	; 62
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	LCD_DATA(X+0x30);
    20b4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <X>
    20b8:	80 5d       	subi	r24, 0xD0	; 208
    20ba:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(',');
    20be:	8c e2       	ldi	r24, 0x2C	; 44
    20c0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(Y+0x30);
    20c4:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Y>
    20c8:	80 5d       	subi	r24, 0xD0	; 208
    20ca:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(')');
    20ce:	89 e2       	ldi	r24, 0x29	; 41
    20d0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	BLOCK_LIFT(BACKWARD); //lift down the block
    20d4:	83 e0       	ldi	r24, 0x03	; 3
    20d6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <BLOCK_LIFT>
    20da:	8f ef       	ldi	r24, 0xFF	; 255
    20dc:	99 e6       	ldi	r25, 0x69	; 105
    20de:	28 e1       	ldi	r18, 0x18	; 24
    20e0:	81 50       	subi	r24, 0x01	; 1
    20e2:	90 40       	sbci	r25, 0x00	; 0
    20e4:	20 40       	sbci	r18, 0x00	; 0
    20e6:	e1 f7       	brne	.-8      	; 0x20e0 <MOVE_TO_NEAREST_DESTINATION+0xfe>
    20e8:	00 c0       	rjmp	.+0      	; 0x20ea <MOVE_TO_NEAREST_DESTINATION+0x108>
    20ea:	00 00       	nop
	_delay_ms(BLOCK_DOWN_DELAY);
	BLOCK_HOLD(BACKWARD); //release the block
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <BLOCK_HOLD>
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	93 ed       	ldi	r25, 0xD3	; 211
    20f6:	20 e3       	ldi	r18, 0x30	; 48
    20f8:	81 50       	subi	r24, 0x01	; 1
    20fa:	90 40       	sbci	r25, 0x00	; 0
    20fc:	20 40       	sbci	r18, 0x00	; 0
    20fe:	e1 f7       	brne	.-8      	; 0x20f8 <MOVE_TO_NEAREST_DESTINATION+0x116>
    2100:	00 c0       	rjmp	.+0      	; 0x2102 <MOVE_TO_NEAREST_DESTINATION+0x120>
    2102:	00 00       	nop
	_delay_ms(BLOCK_RELEASE_DELAY);
	BOT_STOP();
    2104:	0e 94 8d 01 	call	0x31a	; 0x31a <BOT_STOP>
	block_caught = FALSE;
    2108:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <block_caught>
	MOVE_BACK_IF_BLOCK();
    210c:	0e 94 aa 04 	call	0x954	; 0x954 <MOVE_BACK_IF_BLOCK>
	LCD_CLEAR();
    2110:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
}
    2114:	0f 91       	pop	r16
    2116:	08 95       	ret

00002118 <__divmodhi4>:
    2118:	97 fb       	bst	r25, 7
    211a:	07 2e       	mov	r0, r23
    211c:	16 f4       	brtc	.+4      	; 0x2122 <__divmodhi4+0xa>
    211e:	00 94       	com	r0
    2120:	07 d0       	rcall	.+14     	; 0x2130 <__divmodhi4_neg1>
    2122:	77 fd       	sbrc	r23, 7
    2124:	09 d0       	rcall	.+18     	; 0x2138 <__divmodhi4_neg2>
    2126:	0e 94 a0 10 	call	0x2140	; 0x2140 <__udivmodhi4>
    212a:	07 fc       	sbrc	r0, 7
    212c:	05 d0       	rcall	.+10     	; 0x2138 <__divmodhi4_neg2>
    212e:	3e f4       	brtc	.+14     	; 0x213e <__divmodhi4_exit>

00002130 <__divmodhi4_neg1>:
    2130:	90 95       	com	r25
    2132:	81 95       	neg	r24
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	08 95       	ret

00002138 <__divmodhi4_neg2>:
    2138:	70 95       	com	r23
    213a:	61 95       	neg	r22
    213c:	7f 4f       	sbci	r23, 0xFF	; 255

0000213e <__divmodhi4_exit>:
    213e:	08 95       	ret

00002140 <__udivmodhi4>:
    2140:	aa 1b       	sub	r26, r26
    2142:	bb 1b       	sub	r27, r27
    2144:	51 e1       	ldi	r21, 0x11	; 17
    2146:	07 c0       	rjmp	.+14     	; 0x2156 <__udivmodhi4_ep>

00002148 <__udivmodhi4_loop>:
    2148:	aa 1f       	adc	r26, r26
    214a:	bb 1f       	adc	r27, r27
    214c:	a6 17       	cp	r26, r22
    214e:	b7 07       	cpc	r27, r23
    2150:	10 f0       	brcs	.+4      	; 0x2156 <__udivmodhi4_ep>
    2152:	a6 1b       	sub	r26, r22
    2154:	b7 0b       	sbc	r27, r23

00002156 <__udivmodhi4_ep>:
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	5a 95       	dec	r21
    215c:	a9 f7       	brne	.-22     	; 0x2148 <__udivmodhi4_loop>
    215e:	80 95       	com	r24
    2160:	90 95       	com	r25
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	08 95       	ret

00002168 <_exit>:
    2168:	f8 94       	cli

0000216a <__stop_program>:
    216a:	ff cf       	rjmp	.-2      	; 0x216a <__stop_program>
